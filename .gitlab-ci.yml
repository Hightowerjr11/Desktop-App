stages:
  - Build
  - Build Arch Linux
  - Artifact Links

variables:
  BUILD_WIN: 'n'
  BUILD_MAC: 'y'
  BUILD_LINUX: 'n'
  GIT_DEPTH: 5 # Only grab the last 5 commits when cloning
  NEXUS_PATH_ROOT: 'https://nexus.int.windscribe.com/repository/client-desktop/client-desktop'
  NEXUS_PATH_DEPS: '$NEXUS_PATH_ROOT/dependencies/current'
  NEXUS_PATH_BRANCH_UPLOAD: '${NEXUS_PATH_ROOT}/branches/${CI_COMMIT_BRANCH}'
  NEXUS_PATH_TAGGED_UPLOAD: '${NEXUS_PATH_ROOT}/tagged-builds/$VERSION_NO_SUFFIX'
  CODE_SIGNING_PFX_PATH: 'installer\windows\signing\code_signing.pfx'
  CODE_SIGNING_LINUX_PATH: 'client/common/keys/linux'
  CODE_SIGNING_LINUX_PRIVATE_KEY_FILE: '$CODE_SIGNING_LINUX_PATH/key.pem'
  CODE_SIGNING_LINUX_PUBLIC_KEY_FILE: '$CODE_SIGNING_LINUX_PATH/key.pub'
  NOTARIZE_YML_PATH: 'tools/notarize.yml'
  CODE_SIGNING_PROVISION_PROFILE_FOLDER_PATH : 'backend/mac/provisioning_profile'
  CODE_SIGNING_PROVISION_PROFILE_PATH: '$CODE_SIGNING_PROVISION_PROFILE_FOLDER_PATH/embedded.provisionprofile'
  ARCH_LINUX_BUILD_PATH: '/home/build/windscribe'
  RHEL_CMAKE_BUILD_PATH: '/home/build/windscribe'

.template_win10_build: &template_win10_build
  tags: [win10qty6]
  before_script:
    - python3 -m pip install -r tools/requirements.txt

.template_mac_build: &template_mac_build
  tags: [macos11qt6]
  before_script:
    - python3 -m pip install -r tools/requirements.txt

.template_ubuntu_build: &template_ubuntu_build
  image: ubuntu:focal
  before_script:
    # run this blindly until baked into image
    - DEBIAN_FRONTEND=noninteractive apt-get -y update
    - DEBIAN_FRONTEND=noninteractive apt-get -y install build-essential git curl patchelf libpam0g-dev software-properties-common libgl1-mesa-dev fakeroot python3-pip
    - DEBIAN_FRONTEND=noninteractive apt-get -y update
    - DEBIAN_FRONTEND=noninteractive apt-get -y install wget autoconf libtool
    # install cmake 3.23.x (default for Ubuntu 20.04 is 3.16.3)
    - wget -qO /etc/apt/trusted.gpg.d/kitware-key.asc https://apt.kitware.com/keys/kitware-archive-latest.asc
    - echo "deb https://apt.kitware.com/ubuntu/ focal main" | tee /etc/apt/sources.list.d/kitware.list
    - DEBIAN_FRONTEND=noninteractive apt-get -y update
    - DEBIAN_FRONTEND=noninteractive apt-get -y install cmake
    # Qt 6 dependencies
    - DEBIAN_FRONTEND=noninteractive apt-get -y install libfontconfig1-dev libfreetype6-dev libx11-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev libxcb-glx0-dev libxcb-keysyms1-dev libxcb-image0-dev libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync0-dev libxcb-xfixes0-dev libxcb-shape0-dev libxcb-randr0-dev libxcb-render-util0-dev libxcb-util-dev libxcb-xinerama0-dev libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev
    # Only necessary to install golang if we're building the WireGuard package.
    #- wget -q https://go.dev/dl/go1.18.2.linux-amd64.tar.gz
    #- rm -rf /usr/local/go && tar -C /usr/local -xzf go1.18.2.linux-amd64.tar.gz && export PATH=$PATH:/usr/local/go/bin
    - python3 -m pip install --user -r tools/requirements.txt
    # hack to fix 777 file permissions, which breaks the dpkg-deb command in the build_all script.
    - chmod -R o-w installer/linux

.template_rhel_build: &template_rhel_build
  # RHEL 8.4 is the minimum build target for Qt 6.3
  # Could not use the RHEL 8.4 ubi Docker images, as they require a subscription license in order to install many of the packages we require below.
  image: fedora:29
  before_script:
    # run this blindly until baked into image
    - dnf -y update
    - dnf group install -y "Development Tools"
    - dnf install -y gcc-c++ patchelf libxkbcommon-devel mesa-libGL-devel mesa-vulkan-devel cmake python3-pip wget rpm-build
    # Qt 6 dependencies
    - dnf install -y fontconfig-devel freetype-devel libX11-devel libxcb-devel xcb-util-devel xcb-util-image-devel xcb-util-cursor-devel xcb-util-keysyms-devel xcb-util-renderutil-devel libxkbcommon-x11-devel
    - python3 -m pip install --user -r tools/requirements.txt
    # install cmake 3.23.x (default for Fedora 29 is 3.14.5)
    - wget -q -N https://cmake.org/files/v3.23/cmake-3.23.5-linux-x86_64.sh -P ${RHEL_CMAKE_BUILD_PATH}
    - chmod u+x ${RHEL_CMAKE_BUILD_PATH}/cmake-3.23.5-linux-x86_64.sh
    - ${RHEL_CMAKE_BUILD_PATH}/cmake-3.23.5-linux-x86_64.sh --skip-license --exclude-subdir --prefix=${RHEL_CMAKE_BUILD_PATH}
    - export PATH=${RHEL_CMAKE_BUILD_PATH}/bin:$PATH
    # hack to fix 777 file permissions, which breaks the dpkg-deb command in the build_all script.
    - chmod -R o-w installer/linux

.download_dependency_boost:
  script:
    - curl --silent --show-error --fail -u "${NEXUS_USERNAME}:${NEXUS_PASSWORD}" --cacert tools/cacert.pem
      --create-dirs -o build-libs/boost.zip "${NEXUS_PATH_DEPS}/${OS_IDENTIFIER}/boost.zip"

.download_dependency_cares:
  script:
    - curl --silent --show-error --fail -u "${NEXUS_USERNAME}:${NEXUS_PASSWORD}" --cacert tools/cacert.pem
      --create-dirs -o build-libs/cares.zip "${NEXUS_PATH_DEPS}/${OS_IDENTIFIER}/cares.zip"

.download_dependency_curl:
  script:
    - curl --silent --show-error --fail -u "${NEXUS_USERNAME}:${NEXUS_PASSWORD}" --cacert tools/cacert.pem
      --create-dirs -o build-libs/curl.zip "${NEXUS_PATH_DEPS}/${OS_IDENTIFIER}/curl.zip"

.download_dependency_dga:
  script:
    - curl --silent --show-error --fail -u "${NEXUS_USERNAME}:${NEXUS_PASSWORD}" --cacert tools/cacert.pem
      --create-dirs -o build-libs/dga.zip "${NEXUS_PATH_DEPS}/${OS_IDENTIFIER}/dga.zip"

.download_dependency_jom:
  script:
    - curl --silent --show-error --fail -u "${NEXUS_USERNAME}:${NEXUS_PASSWORD}" --cacert tools/cacert.pem
      --create-dirs -o build-libs/jom.zip "${NEXUS_PATH_DEPS}/${OS_IDENTIFIER}/jom.zip"

.download_dependency_lzo:
  script:
    - curl --silent --show-error --fail -u "${NEXUS_USERNAME}:${NEXUS_PASSWORD}" --cacert tools/cacert.pem
      --create-dirs -o build-libs/lzo.zip "${NEXUS_PATH_DEPS}/${OS_IDENTIFIER}/lzo.zip"

.download_dependency_openssl:
  script:
    - curl --silent --show-error --fail -u "${NEXUS_USERNAME}:${NEXUS_PASSWORD}" --cacert tools/cacert.pem
      --create-dirs -o build-libs/openssl.zip "${NEXUS_PATH_DEPS}/${OS_IDENTIFIER}/openssl.zip"

.download_dependency_openvpn:
  script:
    - curl --silent --show-error --fail -u "${NEXUS_USERNAME}:${NEXUS_PASSWORD}" --cacert tools/cacert.pem
      --create-dirs -o build-libs/openvpn_2_5_4.zip "${NEXUS_PATH_DEPS}/${OS_IDENTIFIER}/openvpn_2_5_4.zip"

.download_dependency_qt:
  script:
    - curl --silent --show-error --fail -u "${NEXUS_USERNAME}:${NEXUS_PASSWORD}" --cacert tools/cacert.pem
      --create-dirs -o build-libs/qt.zip "${NEXUS_PATH_DEPS}/${OS_IDENTIFIER}/qt.zip"

.download_dependency_stunnel:
  script:
    - curl --silent --show-error --fail -u "${NEXUS_USERNAME}:${NEXUS_PASSWORD}" --cacert tools/cacert.pem
      --create-dirs -o build-libs/stunnel.zip "${NEXUS_PATH_DEPS}/${OS_IDENTIFIER}/stunnel.zip"

.download_dependency_wireguard:
  script:
    - curl --silent --show-error --fail -u "${NEXUS_USERNAME}:${NEXUS_PASSWORD}" --cacert tools/cacert.pem
      --create-dirs -o build-libs/wireguard.zip "${NEXUS_PATH_DEPS}/${OS_IDENTIFIER}/wireguard.zip"

.download_dependency_zlib:
  script:
    - curl --silent --show-error --fail -u "${NEXUS_USERNAME}:${NEXUS_PASSWORD}" --cacert tools/cacert.pem
      --create-dirs -o build-libs/zlib.zip "${NEXUS_PATH_DEPS}/${OS_IDENTIFIER}/zlib.zip"

# Build and Upload Installer
.build_win_installer_common:
  script:
    - Set-Variable -name OS_IDENTIFIER -value "windows"
    # Remove the default Powershell curl alias so referencing 'curl' will call Windows built-in curl.exe
    - Remove-Item alias:curl
    - Set-Alias -Name curl -Value curl.exe
    - !reference [.download_dependency_boost, script]
    - !reference [.download_dependency_cares, script ]
    - !reference [.download_dependency_curl, script]
    - !reference [.download_dependency_dga, script]
    - !reference [.download_dependency_jom, script]
    - !reference [.download_dependency_lzo, script]
    - !reference [.download_dependency_openssl, script]
    - !reference [.download_dependency_openvpn, script]
    - !reference [.download_dependency_qt, script]
    - !reference [.download_dependency_stunnel, script]
    - !reference [.download_dependency_wireguard, script]
    - !reference [.download_dependency_zlib, script]
    - 'IF(Test-Path .\build-libs\) {Get-ChildItem .\build-libs\*.zip | Foreach {.\tools\bin\7z.exe x $_.FullName -obuild-libs\}}'
    # extractions
    - Set-Variable -name VAULT_CLIENT_TOKEN -value $(curl --cacert tools/cacert.pem
      --data "{\`"role_id\`":\`"$VAULT_ROLE_ID\`",\`"secret_id\`":\`"$VAULT_SECRET_ID\`"}"
      $VAULT_ADDR/v1/auth/approle/login | python3 tools/base/vaulthelper.py --get-client-token)
    # get the secrets JSON and put in VAULT_RESPONSE_JSON
    - "Set-Variable -name VAULT_RESPONSE_JSON -value $(curl --cacert tools/cacert.pem -H \"X-Vault-Token: $VAULT_CLIENT_TOKEN\" $VAULT_ADDR/v1/kv/cicd/client-desktop)"
    # parse the secrets
    - Set-Variable -name CODE_SIGNING_PFX_BASE64 -value $(echo $VAULT_RESPONSE_JSON | python3 tools/base/vaulthelper.py --get-windows-cert)
    - Set-Variable -name NOTARIZE_YML -value $(echo $VAULT_RESPONSE_JSON | python3 tools/base/vaulthelper.py --get-notarize-yml)
    # write the secrets to file -- Nice to have: use secrets without files, no need to cleanup
    - write-output $NOTARIZE_YML | out-file $NOTARIZE_YML_PATH -encoding ascii
    - echo $CODE_SIGNING_PFX_BASE64 > $CODE_SIGNING_PFX_PATH # write base64 encoded temporarily to file
    - powershell -NoProfile -NonInteractive -ExecutionPolicy Bypass -Command .\.base64_decode.ps1 # overwrite temp base64 contents with decoded version
    - Set-Variable -name VERSION -value $(python3 tools/base/extract.py)
    # build
    - tools/build_all -zip --ci-mode --sign

build:win:installer:
  <<: *template_win10_build
  stage: Build
  variables:
    GIT_STRATEGY: clone
  script:
    - !reference [.build_win_installer_common, script]
    - curl --silent --show-error --fail -u "${NEXUS_USERNAME}:${NEXUS_PASSWORD}" --cacert tools/cacert.pem
      --upload-file build-exe/Windscribe_$VERSION.exe "${NEXUS_PATH_BRANCH_UPLOAD}/${OS_IDENTIFIER}/Windscribe_$VERSION.exe"
    - curl --silent --show-error --fail -u "${NEXUS_USERNAME}:${NEXUS_PASSWORD}" --cacert tools/cacert.pem
      --upload-file build-exe/WindscribeSymbols_$VERSION.zip "${NEXUS_PATH_BRANCH_UPLOAD}/${OS_IDENTIFIER}/WindscribeSymbols_$VERSION.zip"
  rules:
    - if: $BUILD_WIN == "y" && $CI_COMMIT_TAG == null && $CI_COMMIT_BRANCH != null

# We don't upload artifacts for merge requests
build:win:installer:mr:
  <<: *template_win10_build
  stage: Build
  variables:
    GIT_STRATEGY: clone
  script:
    - !reference [.build_win_installer_common, script]
  rules:
    - if: $BUILD_WIN == "y" && $CI_COMMIT_TAG == null && $CI_COMMIT_BRANCH == null

build:win:installer:tagged:
  <<: *template_win10_build
  stage: Build
  variables:
    GIT_STRATEGY: clone
  script:
    - !reference [.build_win_installer_common, script]
    - Set-Variable -name VERSION_NO_SUFFIX -value $(python3 tools/base/extract.py --no-suffix)
    - curl --silent --show-error --fail -u "${NEXUS_USERNAME}:${NEXUS_PASSWORD}" --cacert tools/cacert.pem
      --upload-file build-exe/Windscribe_$VERSION.exe "{NEXUS_PATH_TAGGED_UPLOAD}/Windscribe_$VERSION.exe"
    - curl --silent --show-error --fail -u "${NEXUS_USERNAME}:${NEXUS_PASSWORD}" --cacert tools/cacert.pem
      --upload-file build-exe/WindscribeSymbols_$VERSION.zip "${NEXUS_PATH_TAGGED_UPLOAD}/WindscribeSymbols_$VERSION.zip"
  rules:
    - if: $BUILD_WIN == "y" && $CI_COMMIT_TAG != null

.build_mac_installer_common:
  script:
    - OS_IDENTIFIER="macos"
    - !reference [.download_dependency_boost, script]
    - !reference [.download_dependency_cares, script ]
    - !reference [.download_dependency_curl, script]
    - !reference [.download_dependency_dga, script]
    - !reference [.download_dependency_lzo, script]
    - !reference [.download_dependency_openssl, script]
    - !reference [.download_dependency_openvpn, script]
    - !reference [.download_dependency_qt, script]
    - !reference [.download_dependency_stunnel, script]
    - !reference [.download_dependency_wireguard, script]
    - if [ -d ./build-libs/ ]; then for z in ./build-libs/*.zip; do unzip -qod ./build-libs $z; done; fi
    # extractions
    - VAULT_CLIENT_TOKEN=$(curl --cacert tools/cacert.pem --data "{\"role_id\":\"$VAULT_ROLE_ID\",\"secret_id\":\"$VAULT_SECRET_ID\"}"
      $VAULT_ADDR/v1/auth/approle/login | python3 tools/base/vaulthelper.py --get-client-token)
    # get the secrets JSON and put in VAULT_RESPONSE_JSON
    # Note: the single quotes MUST be used here or we'll get a syntax error
    - 'VAULT_RESPONSE_JSON=$(curl --cacert tools/cacert.pem -H "X-Vault-Token: $VAULT_CLIENT_TOKEN" $VAULT_ADDR/v1/kv/cicd/client-desktop)'
    # parse the secrets
    - PROVISION_PROFILE_BASE64=$(echo $VAULT_RESPONSE_JSON | python3 tools/base/vaulthelper.py --get-mac-provision-profile)
    - NOTARIZE_YML=$(echo $VAULT_RESPONSE_JSON | python3 tools/base/vaulthelper.py --get-notarize-yml)
    # write the secrets to file -- Nice to have: use secrets without files, no need to cleanup
    # use echo -e to print \n as newlines
    - echo -e $NOTARIZE_YML > $NOTARIZE_YML_PATH
    - mkdir -p $CODE_SIGNING_PROVISION_PROFILE_FOLDER_PATH
    - echo -e $PROVISION_PROFILE_BASE64 | base64 -d > $CODE_SIGNING_PROVISION_PROFILE_PATH
    - VERSION=$(python3 tools/base/extract.py)

build:mac:installer:
  <<: *template_mac_build
  stage: Build
  variables:
    GIT_STRATEGY: clone
  script:
    - !reference [.build_mac_installer_common, script]
    - tools/build_all -zip --ci-mode --sign
    - curl --silent --show-error --fail -u "${NEXUS_USERNAME}:${NEXUS_PASSWORD}" --cacert tools/cacert.pem
      --upload-file build-exe/Windscribe_$VERSION.dmg "${NEXUS_PATH_BRANCH_UPLOAD}/${OS_IDENTIFIER}/Windscribe_$VERSION.dmg"
  rules:
    - if: $BUILD_MAC == "y" && $CI_COMMIT_TAG == null && $CI_COMMIT_BRANCH != null

# We don't upload artifacts for merge requests
build:mac:installer:mr:
  <<: *template_mac_build
  stage: Build
  variables:
    GIT_STRATEGY: clone
  script:
    - !reference [.build_mac_installer_common, script]
    - tools/build_all -zip --ci-mode --sign
  rules:
    - if: $BUILD_MAC == "y" && $CI_COMMIT_TAG == null && $CI_COMMIT_BRANCH == null

build:mac:installer:tagged:
  <<: *template_mac_build
  stage: Build
  variables:
    GIT_STRATEGY: clone
  script:
    - !reference [.build_mac_installer_common, script]
    # Only tagged builds are notarized
    - tools/build_all -zip --ci-mode --notarize --sign
    - VERSION_NO_SUFFIX=$(python3 tools/base/extract.py --no-suffix)
    - curl --silent --show-error --fail -u "${NEXUS_USERNAME}:${NEXUS_PASSWORD}" --cacert tools/cacert.pem
      --upload-file build-exe/Windscribe_$VERSION.dmg "${NEXUS_PATH_TAGGED_UPLOAD}/Windscribe_$VERSION.dmg"
  rules:
    - if: $BUILD_MAC == "y" && $CI_COMMIT_TAG != null

.build_linux_installer_common:
  script:
    - OS_IDENTIFIER="linux"
    - !reference [.download_dependency_boost, script]
    - !reference [.download_dependency_cares, script ]
    - !reference [.download_dependency_curl, script]
    - !reference [.download_dependency_dga, script]
    - !reference [.download_dependency_lzo, script]
    - !reference [.download_dependency_openssl, script]
    - !reference [.download_dependency_openvpn, script]
    - !reference [.download_dependency_qt, script]
    - !reference [.download_dependency_stunnel, script]
    - !reference [.download_dependency_wireguard, script]
    - if [ -d ./build-libs/ ]; then for z in ./build-libs/*.zip; do unzip -qod ./build-libs $z; done; fi
    # extractions
    - VAULT_CLIENT_TOKEN=$(curl --cacert tools/cacert.pem
      --data "{\"role_id\":\"$VAULT_ROLE_ID\",\"secret_id\":\"$VAULT_SECRET_ID\"}"
      $VAULT_ADDR/v1/auth/approle/login | python3 tools/base/vaulthelper.py --get-client-token)
    # get the secrets JSON and put in VAULT_RESPONSE_JSON
    # Note: the single quotes MUST be used here or we'll get a syntax error
    - 'VAULT_RESPONSE_JSON=$(curl --cacert tools/cacert.pem -H "X-Vault-Token: $VAULT_CLIENT_TOKEN" $VAULT_ADDR/v1/kv/cicd/client-desktop)'
    # parse the secrets
    - LINUX_PRIV_KEY=$(echo $VAULT_RESPONSE_JSON | python3 tools/base/vaulthelper.py --get-linux-priv-key)
    # write the secrets to file -- Nice to have: use secrets without files, no need to cleanup
    # use echo -e to print \n as newlines
    - mkdir -p $CODE_SIGNING_LINUX_PATH
    - echo -e $LINUX_PRIV_KEY > $CODE_SIGNING_LINUX_PRIVATE_KEY_FILE
    # create the public key from the private key
    - openssl rsa -in $CODE_SIGNING_LINUX_PRIVATE_KEY_FILE -pubout > $CODE_SIGNING_LINUX_PUBLIC_KEY_FILE
    # build the application/installer
    - VERSION=$(python3 tools/base/extract.py)

build:ubuntu:installer:
  <<: *template_ubuntu_build
  stage: Build
  variables:
    GIT_STRATEGY: clone
  script:
    - !reference [.build_linux_installer_common, script]
    - tools/build_all -zip --ci-mode --sign
    - curl --silent --show-error --fail -u "${NEXUS_USERNAME}:${NEXUS_PASSWORD}" --cacert tools/cacert.pem
      --upload-file build-exe/windscribe_${VERSION}_amd64.deb "${NEXUS_PATH_BRANCH_UPLOAD}/${OS_IDENTIFIER}/windscribe_${VERSION}_amd64.deb"
  rules:
    - if: $BUILD_LINUX == "y" && $CI_COMMIT_TAG == null && $CI_COMMIT_BRANCH != null

# We don't upload artifacts for merge requests
build:ubuntu:installer:mr:
  <<: *template_ubuntu_build
  stage: Build
  variables:
    GIT_STRATEGY: clone
  script:
    - !reference [.build_linux_installer_common, script]
    - tools/build_all -zip --ci-mode --sign
  rules:
    - if: $BUILD_LINUX == "y" && $CI_COMMIT_TAG == null && $CI_COMMIT_BRANCH == null

build:ubuntu:installer:tagged:
  <<: *template_ubuntu_build
  stage: Build
  variables:
    GIT_STRATEGY: clone
  script:
    - !reference [.build_linux_installer_common, script]
    - tools/build_all -zip --ci-mode --sign
    - VERSION_NO_SUFFIX=$(python3 tools/base/extract.py --no-suffix)
    - curl --silent --show-error --fail -u "${NEXUS_USERNAME}:${NEXUS_PASSWORD}" --cacert tools/cacert.pem
      --upload-file build-exe/windscribe_${VERSION}_amd64.deb "${NEXUS_PATH_TAGGED_UPLOAD}/windscribe_${VERSION}_amd64.deb"
  rules:
    - if: $BUILD_LINUX == "y" && $CI_COMMIT_TAG != null

build:rhel:installer:
  <<: *template_rhel_build
  stage: Build
  variables:
    GIT_STRATEGY: clone
  script:
    - !reference [.build_linux_installer_common, script]
    - tools/build_all -zip --ci-mode --sign --build-rpm
    - curl --silent --show-error --fail -u "${NEXUS_USERNAME}:${NEXUS_PASSWORD}" --cacert tools/cacert.pem
      --upload-file build-exe/windscribe_${VERSION}_x86_64.rpm "${NEXUS_PATH_BRANCH_UPLOAD}/${OS_IDENTIFIER}/windscribe_${VERSION}_x86_64.rpm"
  rules:
    - if: $BUILD_LINUX == "y" && $CI_COMMIT_TAG == null && $CI_COMMIT_BRANCH != null

# We don't upload artifacts for merge requests
build:rhel:installer:mr:
  <<: *template_rhel_build
  stage: Build
  variables:
    GIT_STRATEGY: clone
  script:
    - !reference [.build_linux_installer_common, script]
    - tools/build_all -zip --ci-mode --sign --build-rpm
  rules:
    - if: $BUILD_LINUX == "y" && $CI_COMMIT_TAG == null && $CI_COMMIT_BRANCH == null

build:rhel:installer:tagged:
  <<: *template_rhel_build
  stage: Build
  variables:
    GIT_STRATEGY: clone
  script:
    - !reference [.build_linux_installer_common, script]
    - tools/build_all -zip --ci-mode --sign --build-rpm
    - VERSION_NO_SUFFIX=$(python3 tools/base/extract.py --no-suffix)
    - curl --silent --show-error --fail -u "${NEXUS_USERNAME}:${NEXUS_PASSWORD}" --cacert tools/cacert.pem
      --upload-file build-exe/windscribe_${VERSION}_x86_64.rpm "${NEXUS_PATH_TAGGED_UPLOAD}/windscribe_${VERSION}_x86_64.rpm"
  rules:
    - if: $BUILD_LINUX == "y" && $CI_COMMIT_TAG != null

.template_archlinux_build: &template_archlinux_build
  image: archlinux:base-devel
  before_script:
    - pacman -Sy --noconfirm git curl python3 nftables c-ares freetype2 hicolor-icon-theme

.build_archlinux_installer_prep_build_dir:
  script:
    # makepkg cannot be run as root.  Set up a build folder and use the nobody user.
    - mkdir -p ${ARCH_LINUX_BUILD_PATH}
    - chgrp nobody ${ARCH_LINUX_BUILD_PATH}
    - chmod g+ws ${ARCH_LINUX_BUILD_PATH}
    - setfacl -m u::rwx,g::rwx ${ARCH_LINUX_BUILD_PATH}
    - setfacl -d --set u::rwx,g::rwx,o::- ${ARCH_LINUX_BUILD_PATH}
    - cp installer/linux/arch_package/* ${ARCH_LINUX_BUILD_PATH}
    - export VERSION=$(python3 tools/base/extract.py)
    - export VERSION_NO_SUFFIX=$(python3 tools/base/extract.py --no-suffix)

.build_archlinux_installer_makepkg:
  script:
    # Convert Ubuntu package referenced by APP_DOWNLOAD_URL to an Arch Linux package.
    - cd ${ARCH_LINUX_BUILD_PATH}
    - sudo --preserve-env --user=nobody makepkg --syncdeps
    - cd -

build:archlinux:installer:
  <<: *template_archlinux_build
  stage: Build Arch Linux
  variables:
    GIT_STRATEGY: clone
  script:
    - OS_IDENTIFIER="linux"
    - !reference [.build_archlinux_installer_prep_build_dir, script]
    - export APP_DOWNLOAD_URL="${NEXUS_PATH_BRANCH_UPLOAD}/${OS_IDENTIFIER}/windscribe_${VERSION}_amd64.deb"
    - !reference [.build_archlinux_installer_makepkg, script]
    - curl --silent --show-error --fail -u "${NEXUS_USERNAME}:${NEXUS_PASSWORD}" --cacert tools/cacert.pem
      --upload-file ${ARCH_LINUX_BUILD_PATH}/windscribe-$VERSION_NO_SUFFIX-1-x86_64.pkg.tar.zst
      "${NEXUS_PATH_BRANCH_UPLOAD}/${OS_IDENTIFIER}/windscribe_${VERSION}_x86_64.pkg.tar.zst"
  rules:
    - if: $BUILD_LINUX == "y" && $CI_COMMIT_TAG == null && $CI_COMMIT_BRANCH != null

build:archlinux:installer:tagged:
  <<: *template_archlinux_build
  stage: Build Arch Linux
  variables:
    GIT_STRATEGY: clone
  script:
    - !reference [.build_archlinux_installer_prep_build_dir, script]
    - export APP_DOWNLOAD_URL=${NEXUS_PATH_TAGGED_UPLOAD}/windscribe_${VERSION}_amd64.deb
    - !reference [.build_archlinux_installer_makepkg, script]
    - curl --silent --show-error --fail -u "${NEXUS_USERNAME}:${NEXUS_PASSWORD}" --cacert tools/cacert.pem
      --upload-file ${ARCH_LINUX_BUILD_PATH}/windscribe-$VERSION_NO_SUFFIX-1-x86_64.pkg.tar.zst
      "${NEXUS_PATH_TAGGED_UPLOAD}/windscribe_${VERSION}_x86_64.pkg.tar.zst"
  rules:
    - if: $BUILD_LINUX == "y" && $CI_COMMIT_TAG != null

build:artifact:links:
  tags: [win10qty6]
  stage: Artifact Links
  script:
    - Set-Variable -name VERSION -value $(python3 tools/base/extract.py)
    - echo ${NEXUS_PATH_BRANCH_UPLOAD}/windows/Windscribe_$VERSION.exe
    - echo ${NEXUS_PATH_BRANCH_UPLOAD}/macos/Windscribe_$VERSION.dmg
    - echo ${NEXUS_PATH_BRANCH_UPLOAD}/linux/windscribe_${VERSION}_amd64.deb
    - echo ${NEXUS_PATH_BRANCH_UPLOAD}/linux/windscribe_${VERSION}_x86_64.rpm
    - echo ${NEXUS_PATH_BRANCH_UPLOAD}/linux/windscribe_${VERSION}_x86_64.pkg.tar.zst
  rules:
    - if: $CI_COMMIT_TAG == null && $CI_COMMIT_BRANCH != null

build:artifact:links:tagged:
  tags: [win10qty6]
  stage: Artifact Links
  script:
    - Set-Variable -name VERSION -value $(python3 tools/base/extract.py)
    - Set-Variable -name VERSION_NO_SUFFIX -value $(python3 tools/base/extract.py --no-suffix)
    - echo ${NEXUS_PATH_TAGGED_UPLOAD}/Windscribe_$VERSION.exe
    - echo ${NEXUS_PATH_TAGGED_UPLOAD}/Windscribe_$VERSION.dmg
    - echo ${NEXUS_PATH_TAGGED_UPLOAD}/windscribe_${VERSION}_amd64.deb
    - echo ${NEXUS_PATH_TAGGED_UPLOAD}/windscribe_${VERSION}_x86_64.rpm
    - echo ${NEXUS_PATH_TAGGED_UPLOAD}/windscribe_${VERSION}_x86_64.pkg.tar.zst
  rules:
    - if: $CI_COMMIT_TAG != null
