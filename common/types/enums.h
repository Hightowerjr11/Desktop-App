#ifndef TYPES_ENUMS_H
#define TYPES_ENUMS_H

#include <QString>
#include "utils/protobuf_includes.h"

const int MTU_OFFSET_OPENVPN = 40;
const int MTU_OFFSET_IKEV2 = 80;
const int MTU_OFFSET_WG = 80;

enum DISCONNECT_REASON { DISCONNECTED_ITSELF, DISCONNECTED_BY_USER, DISCONNECTED_BY_RECONNECTION_TIMEOUT_EXCEEDED, DISCONNECTED_WITH_ERROR };

enum PROXY_OPTION { PROXY_OPTION_NONE, PROXY_OPTION_AUTODETECT, PROXY_OPTION_HTTP, PROXY_OPTION_SOCKS };

enum INIT_HELPER_RET { INIT_HELPER_SUCCESS, INIT_HELPER_FAILED, INIT_HELPER_USER_CANCELED };

enum LOGIN_RET { LOGIN_SUCCESS, LOGIN_NO_API_CONNECTIVITY, LOGIN_NO_CONNECTIVITY, LOGIN_INCORRECT_JSON,
                 LOGIN_BAD_USERNAME, LOGIN_PROXY_AUTH_NEED, LOGIN_SSL_ERROR, LOGIN_MISSING_CODE2FA,
                 LOGIN_BAD_CODE2FA, LOGIN_ACCOUNT_DISABLED, LOGIN_SESSION_INVALID };

enum LOGIN_MESSAGE { LOGIN_MESSAGE_NONE, LOGIN_MESSAGE_TRYING_BACKUP1, LOGIN_MESSAGE_TRYING_BACKUP2 };

enum SERVER_API_RET_CODE { SERVER_RETURN_SUCCESS, SERVER_RETURN_NETWORK_ERROR, SERVER_RETURN_INCORRECT_JSON, SERVER_RETURN_BAD_USERNAME,
                           SERVER_RETURN_PROXY_AUTH_FAILED, SERVER_RETURN_SSL_ERROR, SERVER_RETURN_API_NOT_READY,
                           SERVER_RETURN_MISSING_CODE2FA, SERVER_RETURN_BAD_CODE2FA, SERVER_RETURN_WIREGUARD_KEY_LIMIT,
                           SERVER_RETURN_ACCOUNT_DISABLED, SERVER_RETURN_SESSION_INVALID };

enum ENGINE_INIT_RET_CODE { ENGINE_INIT_SUCCESS, ENGINE_INIT_HELPER_FAILED, ENGINE_INIT_BFE_SERVICE_FAILED, ENGINE_INIT_HELPER_USER_CANCELED };

enum CONNECT_STATE { CONNECT_STATE_DISCONNECTED, CONNECT_STATE_CONNECTED, CONNECT_STATE_CONNECTING,
                     CONNECT_STATE_DISCONNECTING};

enum PROXY_SHARING_TYPE { PROXY_SHARING_HTTP, PROXY_SHARING_SOCKS };

enum ORDER_LOCATIONS_TYPE { ORDER_LOCATIONS_BY_GEOGRAPHY, ORDER_LOCATIONS_BY_ALPHABETICALLY, ORDER_LOCATIONS_BY_LATENCY };

enum DNS_POLICY_TYPE { DNS_TYPE_OS_DEFAULT, DNS_TYPE_OPEN_DNS, DNS_TYPE_CLOUDFLARE, DNS_TYPE_GOOGLE, DNS_TYPE_CONTROLD };

enum UPDATE_CHANNEL { UPDATE_CHANNEL_RELEASE, UPDATE_CHANNEL_BETA, UPDATE_CHANNEL_GUINEA_PIG, UPDATE_CHANNEL_INTERNAL };

enum FIREWALL_MODE { FIREWALL_MODE_MANUAL, FIREWALL_MODE_AUTOMATIC, FIREWALL_MODE_ALWAYS_ON };
enum FIREWALL_WHEN { FIREWALL_WHEN_BEFORE_CONNECTION,  FIREWALL_WHEN_AFTER_CONNECTION };

enum NETWORK_INTERACE_TYPE { NETWORK_INTERFACE_NONE, NETWORK_INTERFACE_ETH, NETWORK_INTERFACE_WIFI, NETWORK_INTERFACE_PPP };
enum NETWORK_TRUST_TYPE { NETWORK_TRUST_SECURED, NETWORK_TRUST_UNSECURED,  NETWORK_TRUST_FORGET };

enum TAP_ADAPTER_TYPE { TAP_ADAPTER = 1, WINTUN_ADAPTER};

enum DNS_WHILE_CONNECTED_TYPE { DNS_WHILE_CONNECTED_TYPE_ROBERT, DNS_WHILE_CONNECTED_TYPE_CUSTOM};
enum DNS_MANAGER_TYPE { DNS_MANAGER_AUTOMATIC, DNS_MANAGER_RESOLV_CONF, DNS_MANAGER_SYSTEMD_RESOLVED, DNS_MANAGER_NETWORK_MANAGER};

enum USER_WARNING_TYPE { USER_WARNING_MAC_SPOOFING_FAILURE_HARD, USER_WARNING_MAC_SPOOFING_FAILURE_SOFT, USER_WARNING_SEND_LOG_FILE_TOO_BIG,
                       USER_WARNING_VIEW_LOG_FILE_TOO_BIG , USER_WARNING_CHECK_UPDATE_INVALID_PLATFORM };

enum INIT_STATE { INIT_STATE_CLEAN, INIT_STATE_SUCCESS, INIT_STATE_HELPER_FAILED, INIT_STATE_HELPER_USER_CANCELED,  INIT_STATE_BFE_SERVICE_NOT_STARTED, INIT_STATE_BFE_SERVICE_FAILED_TO_START };



QString loginRetToString(LOGIN_RET ret);
ProtoTypes::LoginError loginRetToProtobuf(LOGIN_RET ret);
QString dnsPolicyTypeToString(DNS_POLICY_TYPE d);


#endif // TYPES_ENUMS_H


