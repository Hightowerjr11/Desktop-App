#ifndef TYPES_ENUMS_H
#define TYPES_ENUMS_H

#include <QString>
#include "utils/protobuf_includes.h"

const int MTU_OFFSET_OPENVPN = 40;
const int MTU_OFFSET_IKEV2 = 80;
const int MTU_OFFSET_WG = 80;

enum DISCONNECT_REASON { DISCONNECTED_ITSELF, DISCONNECTED_BY_USER, DISCONNECTED_BY_RECONNECTION_TIMEOUT_EXCEEDED, DISCONNECTED_WITH_ERROR };

enum PROXY_OPTION {
    PROXY_OPTION_NONE = 0,
    PROXY_OPTION_AUTODETECT = 1,
    PROXY_OPTION_HTTP = 2,
    PROXY_OPTION_SOCKS = 3
};

enum INIT_HELPER_RET { INIT_HELPER_SUCCESS, INIT_HELPER_FAILED, INIT_HELPER_USER_CANCELED };

enum LOGIN_RET { LOGIN_SUCCESS, LOGIN_NO_API_CONNECTIVITY, LOGIN_NO_CONNECTIVITY, LOGIN_INCORRECT_JSON,
                 LOGIN_BAD_USERNAME, LOGIN_PROXY_AUTH_NEED, LOGIN_SSL_ERROR, LOGIN_MISSING_CODE2FA,
                 LOGIN_BAD_CODE2FA, LOGIN_ACCOUNT_DISABLED, LOGIN_SESSION_INVALID };

enum LOGIN_MESSAGE { LOGIN_MESSAGE_NONE, LOGIN_MESSAGE_TRYING_BACKUP1, LOGIN_MESSAGE_TRYING_BACKUP2 };

enum SERVER_API_RET_CODE { SERVER_RETURN_SUCCESS, SERVER_RETURN_NETWORK_ERROR, SERVER_RETURN_INCORRECT_JSON, SERVER_RETURN_BAD_USERNAME,
                           SERVER_RETURN_PROXY_AUTH_FAILED, SERVER_RETURN_SSL_ERROR, SERVER_RETURN_API_NOT_READY,
                           SERVER_RETURN_MISSING_CODE2FA, SERVER_RETURN_BAD_CODE2FA, SERVER_RETURN_WIREGUARD_KEY_LIMIT,
                           SERVER_RETURN_ACCOUNT_DISABLED, SERVER_RETURN_SESSION_INVALID };

enum ENGINE_INIT_RET_CODE { ENGINE_INIT_SUCCESS, ENGINE_INIT_HELPER_FAILED, ENGINE_INIT_BFE_SERVICE_FAILED, ENGINE_INIT_HELPER_USER_CANCELED };

enum CONNECT_STATE {
    CONNECT_STATE_DISCONNECTED = 0,
    CONNECT_STATE_CONNECTED = 1,
    CONNECT_STATE_CONNECTING = 2,
    CONNECT_STATE_DISCONNECTING = 3
};

enum PROXY_SHARING_TYPE {
    PROXY_SHARING_HTTP = 0,
    PROXY_SHARING_SOCKS = 1
};

enum ORDER_LOCATIONS_TYPE {
    ORDER_LOCATIONS_BY_GEOGRAPHY = 0,
    ORDER_LOCATIONS_BY_ALPHABETICALLY = 1,
    ORDER_LOCATIONS_BY_LATENCY = 2
};

enum DNS_POLICY_TYPE {
    DNS_TYPE_OS_DEFAULT = 0,
    DNS_TYPE_OPEN_DNS = 1,
    DNS_TYPE_CLOUDFLARE = 2,
    DNS_TYPE_GOOGLE = 3,
    DNS_TYPE_CONTROLD = 4
};

enum UPDATE_CHANNEL {
    UPDATE_CHANNEL_RELEASE = 0,
    UPDATE_CHANNEL_BETA = 1,
    UPDATE_CHANNEL_GUINEA_PIG = 2,
    UPDATE_CHANNEL_INTERNAL = 3
};

enum FIREWALL_MODE {
    FIREWALL_MODE_MANUAL = 0,
    FIREWALL_MODE_AUTOMATIC = 1,
    FIREWALL_MODE_ALWAYS_ON =2
};

enum FIREWALL_WHEN {
    FIREWALL_WHEN_BEFORE_CONNECTION = 0,
    FIREWALL_WHEN_AFTER_CONNECTION = 1
};

enum NETWORK_INTERACE_TYPE {
    NETWORK_INTERFACE_NONE = 0,
    NETWORK_INTERFACE_ETH = 1,
    NETWORK_INTERFACE_WIFI = 2,
    NETWORK_INTERFACE_PPP = 3
};

enum NETWORK_TRUST_TYPE {
    NETWORK_TRUST_SECURED = 0,
    NETWORK_TRUST_UNSECURED = 1,
    NETWORK_TRUST_FORGET = 2
};

enum TAP_ADAPTER_TYPE {
    TAP_ADAPTER = 1,
    WINTUN_ADAPTER = 2
};

enum DNS_WHILE_CONNECTED_TYPE {
    DNS_WHILE_CONNECTED_TYPE_ROBERT = 0,
    DNS_WHILE_CONNECTED_TYPE_CUSTOM = 1
};
enum DNS_MANAGER_TYPE {
    DNS_MANAGER_AUTOMATIC = 0,
    DNS_MANAGER_RESOLV_CONF = 1,
    DNS_MANAGER_SYSTEMD_RESOLVED = 2,
    DNS_MANAGER_NETWORK_MANAGER = 3
};

enum USER_WARNING_TYPE {
    USER_WARNING_MAC_SPOOFING_FAILURE_HARD = 0,
    USER_WARNING_MAC_SPOOFING_FAILURE_SOFT = 1,
    USER_WARNING_SEND_LOG_FILE_TOO_BIG = 2,
    USER_WARNING_VIEW_LOG_FILE_TOO_BIG = 3,
    USER_WARNING_CHECK_UPDATE_INVALID_PLATFORM = 4
};

enum INIT_STATE {
    INIT_STATE_CLEAN = 0,
    INIT_STATE_SUCCESS = 1,
    INIT_STATE_HELPER_FAILED = 2,
    INIT_STATE_HELPER_USER_CANCELED = 3,
    INIT_STATE_BFE_SERVICE_NOT_STARTED = 4,
    INIT_STATE_BFE_SERVICE_FAILED_TO_START = 5
};


QString loginRetToString(LOGIN_RET ret);
ProtoTypes::LoginError loginRetToProtobuf(LOGIN_RET ret);
QString dnsPolicyTypeToString(DNS_POLICY_TYPE d);


#endif // TYPES_ENUMS_H


