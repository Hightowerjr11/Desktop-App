syntax = "proto2";
import "types.proto";

package IPCClientCommands;

message ClientAuth
{
  optional uint32 protocol_version = 1;    // current version 1
  optional uint32 client_id = 2;           // 0 - GUI app, 1 - CLI app
  optional uint32 pid = 3;                 // process ID
  optional string name = 4;                // an arbitrary name of the client
}

// client sends ClientPing command every 3 sec
message ClientPing
{
}

message GetState
{
}

message Init            
{
}

message Cleanup         // cleanup egnine and finish process
{
  optional bool is_exit_with_restart = 1;
  optional bool is_firewall_checked = 2;
  optional bool is_firewall_always_on = 3;
  optional bool is_launch_on_start = 4;
}
 

message EnableBfe_win   
{
}

message GetSettings
{
}

message SetSettings
{
  optional ProtoTypes.EngineSettings engineSettings = 1;
}

message Login           
{
  optional string auth_hash = 1;
  optional string username = 2;   // username/password used only if auth_hash is empty
  optional string password = 3;
  optional string code2fa = 4;
  optional bool use_last_login_settings = 5 [default = false];  // if this flag is true then all others not used
}

message SignOut           
{
}

message Firewall
{
  optional bool is_enable = 1 [default = false];
}

message Connect
{
   optional ProtoTypes.LocationId locationdId = 1;
}

message Disconnect
{
}

message EmergencyConnect
{
}

message EmergencyDisconnect
{
}

message ApplicationActivated
{
   optional bool is_activated = 1 [default = false];
}

message RecordInstall
{
}

message SendConfirmEmail
{
}

message SendDebugLog
{
}

message SetBlockConnect
{
   optional bool is_block_connect = 1 [default = false];
}

message ClearCredentials
{
}

message StartWifiSharing
{
   optional string ssid = 1;
   optional string password = 2;
}

message StopWifiSharing
{
}

message StartProxySharing
{
   optional ProtoTypes.ProxySharingMode sharing_mode = 1;
}

message StopProxySharing
{
}

message SpeedRating
{
   optional int32 rating = 1;
   optional string local_external_ip = 2;
}

message GotoCustomOvpnConfigMode
{
}

message ContinueWithCredentialsForOvpnConfig
{
   optional string username = 1;
   optional string password = 2;
   optional bool is_save = 3;
}

message GetIpv6StateInOS
{
}

message SetIpv6StateInOS
{
   optional bool is_enabled = 1;
}

message SplitTunneling
{
   optional ProtoTypes.SplitTunneling split_tunneling = 1;
}

message ForceCliStateUpdate
{
}

message DetectPacketSize
{
}

message UpdateVersion
{
  optional bool cancel_download = 1 [ default = false ];
  optional int32 hwnd = 2 [ default = 0 ];	// main window handle (for Windows)
}

message UpdateWindowInfo
{
  optional int32 window_center_x = 1 [ default = 2147483647 ];
  optional int32 window_center_y = 2 [ default = 2147483647 ];
}

message MakeHostsWritableWin
{
}