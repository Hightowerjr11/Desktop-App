#!/bin/bash
# 
# Parses DHCP options from openvpn to update resolv.conf
# To use set as 'up' and 'down' script in your openvpn *.conf:
# up /etc/openvpn/update-resolv-conf
# down /etc/openvpn/update-resolv-conf
#
# Used snippets of resolvconf script by Thomas Hood and Chris Hanson.
# Licensed under the GNU GPL.  See /usr/share/common-licenses/GPL. 
# 
# Example envs set from openvpn:
#
#     foreign_option_1='dhcp-option DNS 193.43.27.132'
#     foreign_option_2='dhcp-option DNS 193.43.27.133'
#     foreign_option_3='dhcp-option DOMAIN be.bnc.ch'
#

[ -x /sbin/resolvconf ] || exit 0
[ "$script_type" ] || exit 0
[ "$dev" ] || exit 0

cmd() {
	echo "[#] $*" >&2
	"$@"
}

resolvconf_iface_prefix() {
	[[ -f /etc/resolvconf/interface-order ]] || return 0
	local iface
	while read -r iface; do
		[[ $iface =~ ^([A-Za-z0-9-]+)\*$ ]] || continue
		echo "${BASH_REMATCH[1]}." && return 0
	done < /etc/resolvconf/interface-order
}

split_into_parts()
{
	part1="$1"
	part2="$2"
	part3="$3"
}

dnsleak_protection_up() 
{

	local interface_name="$1"
	local marker="-m comment --comment \"Windscribe client dns leak protection\""

	if [ -z "$interface_name" ]
	then
   		echo "\$interface_name is empty"
   		return 0
	fi

	# disable DNS traffic on interface != utun420
	local rules=$'*filter\n'
	printf -v rules '%s:windscribe_dnsleaks - [0:0]\n' "$rules"
	printf -v rules '%s-A OUTPUT -j windscribe_dnsleaks %s\n' "$rules" "$marker"

	printf -v rules '%s-A windscribe_dnsleaks -o lo -j ACCEPT %s\n' "$rules" "$marker"
	printf -v rules '%s-A windscribe_dnsleaks ! -o %s -p udp --dport 53 -j DROP %s\n' "$rules" "$interface_name" "$marker"
	printf -v rules '%s-A windscribe_dnsleaks ! -o %s -p tcp --dport 53 -j DROP %s\n' "$rules" "$interface_name" "$marker"

	printf -v rules '%s-A windscribe_dnsleaks -j ACCEPT %s\n' "$rules" "$marker"
	printf -v rules '%sCOMMIT\n' "$rules"

	echo -n "$rules" | cmd "iptables-restore" -n
}

dnsleak_protection_down() 
{

	local line iptables found restore in_filter_section
	restore="" found=0 is_filter_section=0
	while read -r line; do
		if [[ $line == "*filter"* ]]; then
			is_filter_section=1
		else
			[[ $line == "*"* ]] && is_filter_section=0
		fi

		[[ $line == "*"* || $line == COMMIT || $line == "-A "*"-m comment --comment \"Windscribe client dns leak protection\""* ]] || continue
		[[ $line == "-A"* ]] && found=1
		
		if [[ $is_filter_section -ne 0 && $line == COMMIT ]]; then
			printf -v restore '%s-X windscribe_dnsleaks\n' "$restore"
		fi
		printf -v restore '%s%s\n' "$restore" "${line/#-A/-D}"

	done < <(iptables-save 2>/dev/null)
	
	if [[ $found -ne 0 ]]; then
		echo -n "$restore" | cmd "iptables-restore" -n
	fi
}


case "$script_type" in
  up)
	NMSRVRS=""
	SRCHS=""
	for optionvarname in ${!foreign_option_*} ; do
		option="${!optionvarname}"
		echo "$option"
		split_into_parts $option
		if [ "$part1" = "dhcp-option" ] ; then
			if [ "$part2" = "DNS" ] ; then
				NMSRVRS="${NMSRVRS:+$NMSRVRS }$part3"
			elif [ "$part2" = "DOMAIN" ] ; then
				SRCHS="${SRCHS:+$SRCHS }$part3"
			fi
		fi
	done
	R=""
	[ "$SRCHS" ] && R="search $SRCHS
"
	for NS in $NMSRVRS ; do
        	R="${R}nameserver $NS
"
	done

	if [[ -z "${is_wireguard}" ]]; then
		echo -n "$R" | /sbin/resolvconf -a "${dev}.openvpn"
	else
		echo -n "$R" | /sbin/resolvconf -a "$(resolvconf_iface_prefix)${dev}" -m 0 -x
	fi

	dnsleak_protection_up ${dev}


	;;
  down)
	if [[ -z "${is_wireguard}" ]]; then
  		/sbin/resolvconf -d "${dev}.openvpn"
	else
  		/sbin/resolvconf -d "$(resolvconf_iface_prefix)${dev}" -f
	fi

	dnsleak_protection_down

	;;
esac

