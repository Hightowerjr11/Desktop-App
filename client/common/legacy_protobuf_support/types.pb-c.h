/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: types.proto */

#ifndef PROTOBUF_C_types_2eproto__INCLUDED
#define PROTOBUF_C_types_2eproto__INCLUDED

#include "protobuf-c/protobuf-c.h"

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct ProtoTypes__ApiNotification ProtoTypes__ApiNotification;
typedef struct ProtoTypes__City ProtoTypes__City;
typedef struct ProtoTypes__Location ProtoTypes__Location;
typedef struct ProtoTypes__LocationId ProtoTypes__LocationId;
typedef struct ProtoTypes__ArrayLocationId ProtoTypes__ArrayLocationId;
typedef struct ProtoTypes__SessionStatus ProtoTypes__SessionStatus;
typedef struct ProtoTypes__CheckUpdateInfo ProtoTypes__CheckUpdateInfo;
typedef struct ProtoTypes__MyIpInfo ProtoTypes__MyIpInfo;
typedef struct ProtoTypes__PortMapItem ProtoTypes__PortMapItem;
typedef struct ProtoTypes__ArrayPortMap ProtoTypes__ArrayPortMap;
typedef struct ProtoTypes__LoginInfo ProtoTypes__LoginInfo;
typedef struct ProtoTypes__ConnectState ProtoTypes__ConnectState;
typedef struct ProtoTypes__ArrayApiNotification ProtoTypes__ArrayApiNotification;
typedef struct ProtoTypes__ArrayLocations ProtoTypes__ArrayLocations;
typedef struct ProtoTypes__ConnectionSettings ProtoTypes__ConnectionSettings;
typedef struct ProtoTypes__ApiResolution ProtoTypes__ApiResolution;
typedef struct ProtoTypes__ProxySettings ProtoTypes__ProxySettings;
typedef struct ProtoTypes__FirewallSettings ProtoTypes__FirewallSettings;
typedef struct ProtoTypes__ShareSecureHotspot ProtoTypes__ShareSecureHotspot;
typedef struct ProtoTypes__ShareProxyGateway ProtoTypes__ShareProxyGateway;
typedef struct ProtoTypes__PacketSize ProtoTypes__PacketSize;
typedef struct ProtoTypes__MacAddrSpoofing ProtoTypes__MacAddrSpoofing;
typedef struct ProtoTypes__ConnectedDnsInfo ProtoTypes__ConnectedDnsInfo;
typedef struct ProtoTypes__EngineSettings ProtoTypes__EngineSettings;
typedef struct ProtoTypes__ProxySharingInfo ProtoTypes__ProxySharingInfo;
typedef struct ProtoTypes__WifiSharingInfo ProtoTypes__WifiSharingInfo;
typedef struct ProtoTypes__EnginePersistentState ProtoTypes__EnginePersistentState;
typedef struct ProtoTypes__NetworkInterface ProtoTypes__NetworkInterface;
typedef struct ProtoTypes__NetworkInterfaces ProtoTypes__NetworkInterfaces;
typedef struct ProtoTypes__NetworkWhiteList ProtoTypes__NetworkWhiteList;
typedef struct ProtoTypes__BackgroundSettings ProtoTypes__BackgroundSettings;
typedef struct ProtoTypes__GuiSettings ProtoTypes__GuiSettings;
typedef struct ProtoTypes__GuiPersistentState ProtoTypes__GuiPersistentState;
typedef struct ProtoTypes__SplitTunnelingApp ProtoTypes__SplitTunnelingApp;
typedef struct ProtoTypes__SplitTunnelingNetworkRoute ProtoTypes__SplitTunnelingNetworkRoute;
typedef struct ProtoTypes__SplitTunnelingSettings ProtoTypes__SplitTunnelingSettings;
typedef struct ProtoTypes__SplitTunneling ProtoTypes__SplitTunneling;


/* --- enums --- */

typedef enum _ProtoTypes__ConnectStateType {
  PROTO_TYPES__CONNECT_STATE_TYPE__DISCONNECTED = 0,
  PROTO_TYPES__CONNECT_STATE_TYPE__CONNECTED = 1,
  PROTO_TYPES__CONNECT_STATE_TYPE__CONNECTING = 2,
  PROTO_TYPES__CONNECT_STATE_TYPE__DISCONNECTING = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PROTO_TYPES__CONNECT_STATE_TYPE)
} ProtoTypes__ConnectStateType;
typedef enum _ProtoTypes__ClientId {
  PROTO_TYPES__CLIENT_ID__CLIENT_ID_GUI = 0,
  PROTO_TYPES__CLIENT_ID__CLIENT_ID_CLI = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PROTO_TYPES__CLIENT_ID)
} ProtoTypes__ClientId;
typedef enum _ProtoTypes__ConnectError {
  /*
   * common
   */
  PROTO_TYPES__CONNECT_ERROR__NO_CONNECT_ERROR = 0,
  PROTO_TYPES__CONNECT_ERROR__AUTH_ERROR = 1,
  PROTO_TYPES__CONNECT_ERROR__COULD_NOT_FETCH_CREDENTAILS = 2,
  PROTO_TYPES__CONNECT_ERROR__LOCATION_NOT_EXIST = 3,
  PROTO_TYPES__CONNECT_ERROR__LOCATION_NO_ACTIVE_NODES = 4,
  PROTO_TYPES__CONNECT_ERROR__CANT_RESOLVE_HOSTNAME = 5,
  PROTO_TYPES__CONNECT_ERROR__CONNECTION_BLOCKED = 6,
  /*
   * openvpn
   */
  PROTO_TYPES__CONNECT_ERROR__NO_OPENVPN_SOCKET = 7,
  PROTO_TYPES__CONNECT_ERROR__CANT_RUN_OPENVPN = 8,
  PROTO_TYPES__CONNECT_ERROR__CANNOT_ALLOCATE_TUN_TAP = 9,
  PROTO_TYPES__CONNECT_ERROR__NO_INSTALLED_TUN_TAP = 10,
  PROTO_TYPES__CONNECT_ERROR__ALL_TAP_IN_USE = 11,
  PROTO_TYPES__CONNECT_ERROR__CANNOT_CONNECT_TO_SERVICE_PIPE = 12,
  PROTO_TYPES__CONNECT_ERROR__CANNOT_WRITE_TO_SERVICE_PIPE = 13,
  PROTO_TYPES__CONNECT_ERROR__NO_AVAILABLE_PORT = 14,
  PROTO_TYPES__CONNECT_ERROR__PROXY_AUTH_ERROR = 15,
  PROTO_TYPES__CONNECT_ERROR__UDP_CANT_ASSIGN = 16,
  PROTO_TYPES__CONNECT_ERROR__CONNECTED_ERROR = 17,
  PROTO_TYPES__CONNECT_ERROR__INITIALIZATION_SEQUENCE_COMPLETED_WITH_ERRORS = 18,
  PROTO_TYPES__CONNECT_ERROR__UDP_NO_BUFFER_SPACE = 19,
  PROTO_TYPES__CONNECT_ERROR__UDP_NETWORK_DOWN = 20,
  PROTO_TYPES__CONNECT_ERROR__TCP_ERROR = 21,
  PROTO_TYPES__CONNECT_ERROR__CANNOT_OPEN_CUSTOM_CONFIG = 22,
  /*
   * ikev2
   */
  PROTO_TYPES__CONNECT_ERROR__IKEV_FAILED_TO_CONNECT = 23,
  PROTO_TYPES__CONNECT_ERROR__IKEV_NOT_FOUND_WIN = 24,
  PROTO_TYPES__CONNECT_ERROR__IKEV_FAILED_SET_ENTRY_WIN = 25,
  PROTO_TYPES__CONNECT_ERROR__IKEV_FAILED_MODIFY_HOSTS_WIN = 26,
  PROTO_TYPES__CONNECT_ERROR__IKEV_NETWORK_EXTENSION_NOT_FOUND_MAC = 27,
  PROTO_TYPES__CONNECT_ERROR__IKEV_FAILED_SET_KEYCHAIN_MAC = 28,
  PROTO_TYPES__CONNECT_ERROR__IKEV_FAILED_START_MAC = 29,
  PROTO_TYPES__CONNECT_ERROR__IKEV_FAILED_LOAD_PREFERENCES_MAC = 30,
  PROTO_TYPES__CONNECT_ERROR__IKEV_FAILED_SAVE_PREFERENCES_MAC = 31,
  /*
   * wireguard
   */
  PROTO_TYPES__CONNECT_ERROR__WIREGUARD_CONNECTION_ERROR = 32,
  /*
   * emergency
   */
  PROTO_TYPES__CONNECT_ERROR__EMERGENCY_FAILED_CONNECT = 33,
  PROTO_TYPES__CONNECT_ERROR__WINTUN_OVER_CAPACITY = 34,
  PROTO_TYPES__CONNECT_ERROR__WINTUN_DRIVER_REINSTALLATION_ERROR = 35,
  PROTO_TYPES__CONNECT_ERROR__TAP_DRIVER_REINSTALLATION_ERROR = 36,
  PROTO_TYPES__CONNECT_ERROR__WINTUN_FATAL_ERROR = 37,
  PROTO_TYPES__CONNECT_ERROR__EXE_VERIFY_WSTUNNEL_ERROR = 38,
  PROTO_TYPES__CONNECT_ERROR__EXE_VERIFY_STUNNEL_ERROR = 39,
  PROTO_TYPES__CONNECT_ERROR__EXE_VERIFY_OPENVPN_ERROR = 40,
  PROTO_TYPES__CONNECT_ERROR__EXE_VERIFY_WIREGUARD_ERROR = 41
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PROTO_TYPES__CONNECT_ERROR)
} ProtoTypes__ConnectError;
typedef enum _ProtoTypes__DisconnectReason {
  PROTO_TYPES__DISCONNECT_REASON__DISCONNECTED_ITSELF = 0,
  PROTO_TYPES__DISCONNECT_REASON__DISCONNECTED_BY_USER = 1,
  PROTO_TYPES__DISCONNECT_REASON__DISCONNECTED_BY_RECONNECTION_TIMEOUT_EXCEEDED = 2,
  PROTO_TYPES__DISCONNECT_REASON__DISCONNECTED_WITH_ERROR = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PROTO_TYPES__DISCONNECT_REASON)
} ProtoTypes__DisconnectReason;
typedef enum _ProtoTypes__InitState {
  PROTO_TYPES__INIT_STATE__INIT_CLEAN = 0,
  PROTO_TYPES__INIT_STATE__INIT_SUCCESS = 1,
  PROTO_TYPES__INIT_STATE__INIT_HELPER_FAILED = 2,
  PROTO_TYPES__INIT_STATE__INIT_HELPER_USER_CANCELED = 3,
  PROTO_TYPES__INIT_STATE__INIT_BFE_SERVICE_NOT_STARTED = 4,
  PROTO_TYPES__INIT_STATE__INIT_BFE_SERVICE_FAILED_TO_START = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PROTO_TYPES__INIT_STATE)
} ProtoTypes__InitState;
typedef enum _ProtoTypes__LoginState {
  PROTO_TYPES__LOGIN_STATE__LOGIN_STATE_NOT_LOGGED = 0,
  PROTO_TYPES__LOGIN_STATE__LOGIN_STATE_LOGGED = 1,
  PROTO_TYPES__LOGIN_STATE__LOGIN_STATE_LOGGED_FROM_SETTINGS = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PROTO_TYPES__LOGIN_STATE)
} ProtoTypes__LoginState;
typedef enum _ProtoTypes__LoginError {
  PROTO_TYPES__LOGIN_ERROR__LOGIN_ERROR_SUCCESS = 0,
  PROTO_TYPES__LOGIN_ERROR__LOGIN_ERROR_NO_API_CONNECTIVITY = 1,
  PROTO_TYPES__LOGIN_ERROR__LOGIN_ERROR_NO_CONNECTIVITY = 2,
  PROTO_TYPES__LOGIN_ERROR__LOGIN_ERROR_INCORRECT_JSON = 3,
  PROTO_TYPES__LOGIN_ERROR__LOGIN_ERROR_BAD_USERNAME = 4,
  PROTO_TYPES__LOGIN_ERROR__LOGIN_ERROR_PROXY_AUTH_NEED = 5,
  PROTO_TYPES__LOGIN_ERROR__LOGIN_ERROR_SSL_ERROR = 6,
  PROTO_TYPES__LOGIN_ERROR__LOGIN_ERROR_BAD_CODE2FA = 7,
  PROTO_TYPES__LOGIN_ERROR__LOGIN_ERROR_MISSING_CODE2FA = 8,
  PROTO_TYPES__LOGIN_ERROR__LOGIN_ERROR_ACCOUNT_DISABLED = 9,
  PROTO_TYPES__LOGIN_ERROR__LOGIN_ERROR_SESSION_INVALID = 10
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PROTO_TYPES__LOGIN_ERROR)
} ProtoTypes__LoginError;
typedef enum _ProtoTypes__LoginMessage {
  PROTO_TYPES__LOGIN_MESSAGE__LOGIN_MESSAGE_NONE = 0,
  PROTO_TYPES__LOGIN_MESSAGE__LOGIN_MESSAGE_TRYING_BACKUP1 = 1,
  PROTO_TYPES__LOGIN_MESSAGE__LOGIN_MESSAGE_TRYING_BACKUP2 = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PROTO_TYPES__LOGIN_MESSAGE)
} ProtoTypes__LoginMessage;
typedef enum _ProtoTypes__CustomConfigType {
  PROTO_TYPES__CUSTOM_CONFIG_TYPE__CUSTOM_CONFIG_OPENVPN = 0,
  PROTO_TYPES__CUSTOM_CONFIG_TYPE__CUSTOM_CONFIG_WIREGUARD = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PROTO_TYPES__CUSTOM_CONFIG_TYPE)
} ProtoTypes__CustomConfigType;
typedef enum _ProtoTypes__Protocol {
  PROTO_TYPES__PROTOCOL__PROTOCOL_IKEV2 = 0,
  PROTO_TYPES__PROTOCOL__PROTOCOL_UDP = 1,
  PROTO_TYPES__PROTOCOL__PROTOCOL_TCP = 2,
  PROTO_TYPES__PROTOCOL__PROTOCOL_STUNNEL = 3,
  PROTO_TYPES__PROTOCOL__PROTOCOL_WSTUNNEL = 4,
  PROTO_TYPES__PROTOCOL__PROTOCOL_WIREGUARD = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PROTO_TYPES__PROTOCOL)
} ProtoTypes__Protocol;
typedef enum _ProtoTypes__ProxyOption {
  PROTO_TYPES__PROXY_OPTION__PROXY_OPTION_NONE = 0,
  PROTO_TYPES__PROXY_OPTION__PROXY_OPTION_AUTODETECT = 1,
  PROTO_TYPES__PROXY_OPTION__PROXY_OPTION_HTTP = 2,
  PROTO_TYPES__PROXY_OPTION__PROXY_OPTION_SOCKS = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PROTO_TYPES__PROXY_OPTION)
} ProtoTypes__ProxyOption;
typedef enum _ProtoTypes__FirewallMode {
  PROTO_TYPES__FIREWALL_MODE__FIREWALL_MODE_MANUAL = 0,
  PROTO_TYPES__FIREWALL_MODE__FIREWALL_MODE_AUTOMATIC = 1,
  PROTO_TYPES__FIREWALL_MODE__FIREWALL_MODE_ALWAYS_ON = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PROTO_TYPES__FIREWALL_MODE)
} ProtoTypes__FirewallMode;
typedef enum _ProtoTypes__FirewallWhen {
  PROTO_TYPES__FIREWALL_WHEN__FIREWALL_WHEN_BEFORE_CONNECTION = 0,
  PROTO_TYPES__FIREWALL_WHEN__FIREWALL_WHEN_AFTER_CONNECTION = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PROTO_TYPES__FIREWALL_WHEN)
} ProtoTypes__FirewallWhen;
typedef enum _ProtoTypes__UpdateChannel {
  PROTO_TYPES__UPDATE_CHANNEL__UPDATE_CHANNEL_RELEASE = 0,
  PROTO_TYPES__UPDATE_CHANNEL__UPDATE_CHANNEL_BETA = 1,
  PROTO_TYPES__UPDATE_CHANNEL__UPDATE_CHANNEL_GUINEA_PIG = 2,
  PROTO_TYPES__UPDATE_CHANNEL__UPDATE_CHANNEL_INTERNAL = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PROTO_TYPES__UPDATE_CHANNEL)
} ProtoTypes__UpdateChannel;
typedef enum _ProtoTypes__ProxySharingMode {
  PROTO_TYPES__PROXY_SHARING_MODE__PROXY_SHARING_HTTP = 0,
  PROTO_TYPES__PROXY_SHARING_MODE__PROXY_SHARING_SOCKS = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PROTO_TYPES__PROXY_SHARING_MODE)
} ProtoTypes__ProxySharingMode;
typedef enum _ProtoTypes__DnsPolicy {
  PROTO_TYPES__DNS_POLICY__DNS_POLICY_OS_DEFAULT = 0,
  PROTO_TYPES__DNS_POLICY__DNS_POLICY_OPEN_DNS = 1,
  PROTO_TYPES__DNS_POLICY__DNS_POLICY_CLOUDFLARE = 2,
  PROTO_TYPES__DNS_POLICY__DNS_POLICY_GOOGLE = 3,
  PROTO_TYPES__DNS_POLICY__DNS_POLICY_CONTROLD = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PROTO_TYPES__DNS_POLICY)
} ProtoTypes__DnsPolicy;
typedef enum _ProtoTypes__DnsWhileConnectedType {
  PROTO_TYPES__CONNECTED_DNS_TYPE__CONNECTED_DNS_TYPE_ROBERT = 0,
  PROTO_TYPES__CONNECTED_DNS_TYPE__CONNECTED_DNS_TYPE_CUSTOM = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PROTO_TYPES__CONNECTED_DNS_TYPE)
} ProtoTypes__DnsWhileConnectedType;
typedef enum _ProtoTypes__DnsManagerType {
  PROTO_TYPES__DNS_MANAGER_TYPE__DNS_MANAGER_AUTOMATIC = 0,
  PROTO_TYPES__DNS_MANAGER_TYPE__DNS_MANAGER_RESOLV_CONF = 1,
  PROTO_TYPES__DNS_MANAGER_TYPE__DNS_MANAGER_SYSTEMD_RESOLVED = 2,
  PROTO_TYPES__DNS_MANAGER_TYPE__DNS_MANAGER_NETWORK_MANAGER = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PROTO_TYPES__DNS_MANAGER_TYPE)
} ProtoTypes__DnsManagerType;
typedef enum _ProtoTypes__TapAdapterType {
  PROTO_TYPES__TAP_ADAPTER_TYPE__TAP_ADAPTER = 1,
  PROTO_TYPES__TAP_ADAPTER_TYPE__WINTUN_ADAPTER = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PROTO_TYPES__TAP_ADAPTER_TYPE)
} ProtoTypes__TapAdapterType;
typedef enum _ProtoTypes__NetworkInterfaceType {
  PROTO_TYPES__NETWORK_INTERFACE_TYPE__NETWORK_INTERFACE_NONE = 0,
  PROTO_TYPES__NETWORK_INTERFACE_TYPE__NETWORK_INTERFACE_ETH = 1,
  PROTO_TYPES__NETWORK_INTERFACE_TYPE__NETWORK_INTERFACE_WIFI = 2,
  PROTO_TYPES__NETWORK_INTERFACE_TYPE__NETWORK_INTERFACE_PPP = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PROTO_TYPES__NETWORK_INTERFACE_TYPE)
} ProtoTypes__NetworkInterfaceType;
typedef enum _ProtoTypes__NetworkTrustType {
  PROTO_TYPES__NETWORK_TRUST_TYPE__NETWORK_SECURED = 0,
  PROTO_TYPES__NETWORK_TRUST_TYPE__NETWORK_UNSECURED = 1,
  PROTO_TYPES__NETWORK_TRUST_TYPE__NETWORK_FORGET = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PROTO_TYPES__NETWORK_TRUST_TYPE)
} ProtoTypes__NetworkTrustType;
typedef enum _ProtoTypes__UserWarningType {
  PROTO_TYPES__USER_WARNING_TYPE__USER_WARNING_MAC_SPOOFING_FAILURE_HARD = 0,
  PROTO_TYPES__USER_WARNING_TYPE__USER_WARNING_MAC_SPOOFING_FAILURE_SOFT = 1,
  PROTO_TYPES__USER_WARNING_TYPE__USER_WARNING_SEND_LOG_FILE_TOO_BIG = 2,
  PROTO_TYPES__USER_WARNING_TYPE__USER_WARNING_VIEW_LOG_FILE_TOO_BIG = 3,
  PROTO_TYPES__USER_WARNING_TYPE__USER_WARNING_CHECK_UPDATE_INVALID_PLATFORM = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PROTO_TYPES__USER_WARNING_TYPE)
} ProtoTypes__UserWarningType;
/*
 * === GUI settings (use only in GUI-part) ================================
 */
typedef enum _ProtoTypes__OrderLocationType {
  PROTO_TYPES__ORDER_LOCATION_TYPE__ORDER_LOCATION_BY_GEOGRAPHY = 0,
  PROTO_TYPES__ORDER_LOCATION_TYPE__ORDER_LOCATION_BY_ALPHABETICALLY = 1,
  PROTO_TYPES__ORDER_LOCATION_TYPE__ORDER_LOCATION_BY_LATENCY = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PROTO_TYPES__ORDER_LOCATION_TYPE)
} ProtoTypes__OrderLocationType;
typedef enum _ProtoTypes__LatencyDisplayType {
  PROTO_TYPES__LATENCY_DISPLAY_TYPE__LATENCY_DISPLAY_BARS = 0,
  PROTO_TYPES__LATENCY_DISPLAY_TYPE__LATENCY_DISPLAY_MS = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PROTO_TYPES__LATENCY_DISPLAY_TYPE)
} ProtoTypes__LatencyDisplayType;
typedef enum _ProtoTypes__BackgroundType {
  PROTO_TYPES__BACKGROUND_TYPE__BACKGROUND_TYPE_NONE = 0,
  PROTO_TYPES__BACKGROUND_TYPE__BACKGROUND_TYPE_COUNTRY_FLAGS = 1,
  PROTO_TYPES__BACKGROUND_TYPE__BACKGROUND_TYPE_CUSTOM = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PROTO_TYPES__BACKGROUND_TYPE)
} ProtoTypes__BackgroundType;
typedef enum _ProtoTypes__SplitTunnelingAppType {
  PROTO_TYPES__SPLIT_TUNNELING_APP_TYPE__SPLIT_TUNNELING_APP_TYPE_USER = 0,
  PROTO_TYPES__SPLIT_TUNNELING_APP_TYPE__SPLIT_TUNNELING_APP_TYPE_SYSTEM = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PROTO_TYPES__SPLIT_TUNNELING_APP_TYPE)
} ProtoTypes__SplitTunnelingAppType;
typedef enum _ProtoTypes__SplitTunnelingMode {
  PROTO_TYPES__SPLIT_TUNNELING_MODE__SPLIT_TUNNELING_MODE_EXCLUDE = 0,
  PROTO_TYPES__SPLIT_TUNNELING_MODE__SPLIT_TUNNELING_MODE_INCLUDE = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PROTO_TYPES__SPLIT_TUNNELING_MODE)
} ProtoTypes__SplitTunnelingMode;
typedef enum _ProtoTypes__SplitTunnelingNetworkRouteType {
  PROTO_TYPES__SPLIT_TUNNELING_NETWORK_ROUTE_TYPE__SPLIT_TUNNELING_NETWORK_ROUTE_TYPE_IP = 0,
  PROTO_TYPES__SPLIT_TUNNELING_NETWORK_ROUTE_TYPE__SPLIT_TUNNELING_NETWORK_ROUTE_TYPE_HOSTNAME = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PROTO_TYPES__SPLIT_TUNNELING_NETWORK_ROUTE_TYPE)
} ProtoTypes__SplitTunnelingNetworkRouteType;
typedef enum _ProtoTypes__UpdateVersionState {
  PROTO_TYPES__UPDATE_VERSION_STATE__UPDATE_VERSION_STATE_INIT = 0,
  PROTO_TYPES__UPDATE_VERSION_STATE__UPDATE_VERSION_STATE_DOWNLOADING = 1,
  PROTO_TYPES__UPDATE_VERSION_STATE__UPDATE_VERSION_STATE_RUNNING = 2,
  PROTO_TYPES__UPDATE_VERSION_STATE__UPDATE_VERSION_STATE_DONE = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PROTO_TYPES__UPDATE_VERSION_STATE)
} ProtoTypes__UpdateVersionState;
typedef enum _ProtoTypes__UpdateVersionError {
  PROTO_TYPES__UPDATE_VERSION_ERROR__UPDATE_VERSION_ERROR_NO_ERROR = 0,
  PROTO_TYPES__UPDATE_VERSION_ERROR__UPDATE_VERSION_ERROR_DL_FAIL = 1,
  PROTO_TYPES__UPDATE_VERSION_ERROR__UPDATE_VERSION_ERROR_SIGN_FAIL = 2,
  PROTO_TYPES__UPDATE_VERSION_ERROR__UPDATE_VERSION_ERROR_OTHER_FAIL = 3,
  PROTO_TYPES__UPDATE_VERSION_ERROR__UPDATE_VERSION_ERROR_MOUNT_FAIL = 4,
  PROTO_TYPES__UPDATE_VERSION_ERROR__UPDATE_VERSION_ERROR_DMG_HAS_NO_INSTALLER_FAIL = 5,
  PROTO_TYPES__UPDATE_VERSION_ERROR__UPDATE_VERSION_ERROR_CANNOT_REMOVE_EXISTING_TEMP_INSTALLER_FAIL = 6,
  PROTO_TYPES__UPDATE_VERSION_ERROR__UPDATE_VERSION_ERROR_COPY_FAIL = 7,
  PROTO_TYPES__UPDATE_VERSION_ERROR__UPDATE_VERSION_ERROR_START_INSTALLER_FAIL = 8,
  PROTO_TYPES__UPDATE_VERSION_ERROR__UPDATE_VERSION_ERROR_COMPARE_HASH_FAIL = 9,
  PROTO_TYPES__UPDATE_VERSION_ERROR__UPDATE_VERSION_ERROR_API_HASH_INVALID = 10
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PROTO_TYPES__UPDATE_VERSION_ERROR)
} ProtoTypes__UpdateVersionError;
typedef enum _ProtoTypes__WebSessionPurpose {
  PROTO_TYPES__WEB_SESSION_PURPOSE__WEB_SESSION_PURPOSE_MANAGE_ACCOUNT = 0,
  PROTO_TYPES__WEB_SESSION_PURPOSE__WEB_SESSION_PURPOSE_ADD_EMAIL = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PROTO_TYPES__WEB_SESSION_PURPOSE)
} ProtoTypes__WebSessionPurpose;

/* --- messages --- */

struct  ProtoTypes__ApiNotification
{
  ProtobufCMessage base;
  protobuf_c_boolean has_id;
  int64_t id;
  char *title;
  char *message;
  protobuf_c_boolean has_date;
  int64_t date;
  protobuf_c_boolean has_perm_free;
  int32_t perm_free;
  protobuf_c_boolean has_perm_pro;
  int32_t perm_pro;
  protobuf_c_boolean has_popup;
  int32_t popup;
};
#define PROTO_TYPES__API_NOTIFICATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto_types__api_notification__descriptor) \
    , 0, 0, NULL, NULL, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  ProtoTypes__City
{
  ProtobufCMessage base;
  ProtoTypes__LocationId *id;
  char *name;
  char *nick;
  /*
   * -2 no ping info, -1 ping failed, other values ping time in ms
   */
  protobuf_c_boolean has_ping_time;
  int32_t ping_time;
  protobuf_c_boolean has_is_premium_only;
  protobuf_c_boolean is_premium_only;
  protobuf_c_boolean has_is_disabled;
  protobuf_c_boolean is_disabled;
  /*
   * use for static IP sublocation description
   */
  char *static_ip_country_code;
  char *static_ip_type;
  char *static_ip;
  /*
   * use for custom config sublocation
   */
  protobuf_c_boolean has_custom_config_type;
  ProtoTypes__CustomConfigType custom_config_type;
  protobuf_c_boolean has_custom_config_is_correct;
  protobuf_c_boolean custom_config_is_correct;
  /*
   * not empty if custom_config_is_correct == false
   */
  char *custom_config_error_message;
  protobuf_c_boolean has_link_speed;
  int32_t link_speed;
  protobuf_c_boolean has_health;
  int32_t health;
};
#define PROTO_TYPES__CITY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto_types__city__descriptor) \
    , NULL, NULL, NULL, 0, 0, 0, 0, 0, 0, NULL, NULL, NULL, 0, PROTO_TYPES__CUSTOM_CONFIG_TYPE__CUSTOM_CONFIG_OPENVPN, 0, 0, NULL, 0, 0, 0, 0 }


struct  ProtoTypes__Location
{
  ProtobufCMessage base;
  ProtoTypes__LocationId *id;
  char *name;
  char *country_code;
  protobuf_c_boolean has_is_premium_only;
  protobuf_c_boolean is_premium_only;
  /*
   * if false, then no p2p support
   */
  protobuf_c_boolean has_is_p2p_supported;
  protobuf_c_boolean is_p2p_supported;
  size_t n_cities;
  ProtoTypes__City **cities;
};
#define PROTO_TYPES__LOCATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto_types__location__descriptor) \
    , NULL, NULL, NULL, 0, 0, 0, 0, 0,NULL }


struct  ProtoTypes__LocationId
{
  ProtobufCMessage base;
  protobuf_c_boolean has_type;
  int32_t type;
  protobuf_c_boolean has_id;
  int32_t id;
  char *city;
};
#define PROTO_TYPES__LOCATION_ID__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto_types__location_id__descriptor) \
    , 0, 0, 0, 0, NULL }


struct  ProtoTypes__ArrayLocationId
{
  ProtobufCMessage base;
  size_t n_ids;
  ProtoTypes__LocationId **ids;
};
#define PROTO_TYPES__ARRAY_LOCATION_ID__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto_types__array_location_id__descriptor) \
    , 0,NULL }


struct  ProtoTypes__SessionStatus
{
  ProtobufCMessage base;
  protobuf_c_boolean has_is_premium;
  protobuf_c_boolean is_premium;
  /*
   * 2 - disabled
   */
  protobuf_c_boolean has_status;
  int32_t status;
  protobuf_c_boolean has_rebill;
  int32_t rebill;
  protobuf_c_boolean has_billing_plan_id;
  int32_t billing_plan_id;
  char *premium_expire_date;
  protobuf_c_boolean has_traffic_used;
  int64_t traffic_used;
  protobuf_c_boolean has_traffic_max;
  int64_t traffic_max;
  char *username;
  char *user_id;
  char *email;
  protobuf_c_boolean has_email_status;
  int32_t email_status;
  protobuf_c_boolean has_static_ips;
  int32_t static_ips;
  /*
   * enabled locations for free users	
   */
  size_t n_alc;
  char **alc;
};
#define PROTO_TYPES__SESSION_STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto_types__session_status__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, NULL, 0, 0, 0, 0, NULL, NULL, NULL, 0, 0, 0, 0, 0,NULL }


struct  ProtoTypes__CheckUpdateInfo
{
  ProtobufCMessage base;
  protobuf_c_boolean has_is_available;
  protobuf_c_boolean is_available;
  char *version;
  protobuf_c_boolean has_update_channel;
  ProtoTypes__UpdateChannel update_channel;
  protobuf_c_boolean has_latest_build;
  int32_t latest_build;
  char *url;
  protobuf_c_boolean has_is_supported;
  protobuf_c_boolean is_supported;
  char *sha256;
};
#define PROTO_TYPES__CHECK_UPDATE_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto_types__check_update_info__descriptor) \
    , 0, 0, NULL, 0, PROTO_TYPES__UPDATE_CHANNEL__UPDATE_CHANNEL_RELEASE, 0, 0, NULL, 0, 0, NULL }


struct  ProtoTypes__MyIpInfo
{
  ProtobufCMessage base;
  char *ip;
  protobuf_c_boolean has_is_disconnected_state;
  protobuf_c_boolean is_disconnected_state;
};
#define PROTO_TYPES__MY_IP_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto_types__my_ip_info__descriptor) \
    , NULL, 0, 0 }


struct  ProtoTypes__PortMapItem
{
  ProtobufCMessage base;
  protobuf_c_boolean has_protocol;
  ProtoTypes__Protocol protocol;
  char *heading;
  char *use;
  size_t n_ports;
  uint32_t *ports;
};
#define PROTO_TYPES__PORT_MAP_ITEM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto_types__port_map_item__descriptor) \
    , 0, PROTO_TYPES__PROTOCOL__PROTOCOL_IKEV2, NULL, NULL, 0,NULL }


struct  ProtoTypes__ArrayPortMap
{
  ProtobufCMessage base;
  size_t n_port_map_item;
  ProtoTypes__PortMapItem **port_map_item;
};
#define PROTO_TYPES__ARRAY_PORT_MAP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto_types__array_port_map__descriptor) \
    , 0,NULL }


struct  ProtoTypes__LoginInfo
{
  ProtobufCMessage base;
  protobuf_c_boolean has_is_saved_auth_hash_exists;
  protobuf_c_boolean is_saved_auth_hash_exists;
  protobuf_c_boolean has_is_saved_api_settings_exists;
  protobuf_c_boolean is_saved_api_settings_exists;
  protobuf_c_boolean has_login_state;
  ProtoTypes__LoginState login_state;
  protobuf_c_boolean has_login_error;
  ProtoTypes__LoginError login_error;
  protobuf_c_boolean has_login_message;
  ProtoTypes__LoginMessage login_message;
  /*
   * valid only in logged state or if is_saved_auth_hash_exists true
   */
  char *auth_hash;
};
#define PROTO_TYPES__LOGIN_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto_types__login_info__descriptor) \
    , 0, 0, 0, 0, 0, PROTO_TYPES__LOGIN_STATE__LOGIN_STATE_NOT_LOGGED, 0, PROTO_TYPES__LOGIN_ERROR__LOGIN_ERROR_SUCCESS, 0, PROTO_TYPES__LOGIN_MESSAGE__LOGIN_MESSAGE_NONE, NULL }


struct  ProtoTypes__ConnectState
{
  ProtobufCMessage base;
  protobuf_c_boolean has_connect_state_type;
  ProtoTypes__ConnectStateType connect_state_type;
  protobuf_c_boolean has_disconnect_reason;
  ProtoTypes__DisconnectReason disconnect_reason;
  /*
   * use if disconnect_reason == DISCONNECTED_WITH_ERROR
   */
  protobuf_c_boolean has_connect_error;
  ProtoTypes__ConnectError connect_error;
  /*
   * valid only for connecting/connected state
   */
  ProtoTypes__LocationId *location;
};
#define PROTO_TYPES__CONNECT_STATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto_types__connect_state__descriptor) \
    , 0, PROTO_TYPES__CONNECT_STATE_TYPE__DISCONNECTED, 0, PROTO_TYPES__DISCONNECT_REASON__DISCONNECTED_BY_USER, 0, PROTO_TYPES__CONNECT_ERROR__NO_CONNECT_ERROR, NULL }


struct  ProtoTypes__ArrayApiNotification
{
  ProtobufCMessage base;
  size_t n_api_notifications;
  ProtoTypes__ApiNotification **api_notifications;
};
#define PROTO_TYPES__ARRAY_API_NOTIFICATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto_types__array_api_notification__descriptor) \
    , 0,NULL }


struct  ProtoTypes__ArrayLocations
{
  ProtobufCMessage base;
  size_t n_locations;
  ProtoTypes__Location **locations;
};
#define PROTO_TYPES__ARRAY_LOCATIONS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto_types__array_locations__descriptor) \
    , 0,NULL }


struct  ProtoTypes__ConnectionSettings
{
  ProtobufCMessage base;
  protobuf_c_boolean has_is_automatic;
  protobuf_c_boolean is_automatic;
  protobuf_c_boolean has_protocol;
  ProtoTypes__Protocol protocol;
  protobuf_c_boolean has_port;
  uint32_t port;
};
#define PROTO_TYPES__CONNECTION_SETTINGS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto_types__connection_settings__descriptor) \
    , 0, 1, 0, PROTO_TYPES__PROTOCOL__PROTOCOL_IKEV2, 0, 500u }


struct  ProtoTypes__ApiResolution
{
  ProtobufCMessage base;
  protobuf_c_boolean has_is_automatic;
  protobuf_c_boolean is_automatic;
  char *manual_ip;
};
#define PROTO_TYPES__API_RESOLUTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto_types__api_resolution__descriptor) \
    , 0, 1, NULL }


struct  ProtoTypes__ProxySettings
{
  ProtobufCMessage base;
  protobuf_c_boolean has_proxy_option;
  ProtoTypes__ProxyOption proxy_option;
  char *address;
  protobuf_c_boolean has_port;
  uint32_t port;
  char *username;
  char *password;
};
#define PROTO_TYPES__PROXY_SETTINGS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto_types__proxy_settings__descriptor) \
    , 0, PROTO_TYPES__PROXY_OPTION__PROXY_OPTION_NONE, NULL, 0, 0, NULL, NULL }


struct  ProtoTypes__FirewallSettings
{
  ProtobufCMessage base;
  protobuf_c_boolean has_mode;
  ProtoTypes__FirewallMode mode;
  protobuf_c_boolean has_when;
  ProtoTypes__FirewallWhen when;
};
#define PROTO_TYPES__FIREWALL_SETTINGS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto_types__firewall_settings__descriptor) \
    , 0, PROTO_TYPES__FIREWALL_MODE__FIREWALL_MODE_AUTOMATIC, 0, PROTO_TYPES__FIREWALL_WHEN__FIREWALL_WHEN_BEFORE_CONNECTION }


struct  ProtoTypes__ShareSecureHotspot
{
  ProtobufCMessage base;
  protobuf_c_boolean has_is_enabled;
  protobuf_c_boolean is_enabled;
  char *ssid;
  char *password;
};
#define PROTO_TYPES__SHARE_SECURE_HOTSPOT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto_types__share_secure_hotspot__descriptor) \
    , 0, 0, NULL, NULL }


struct  ProtoTypes__ShareProxyGateway
{
  ProtobufCMessage base;
  protobuf_c_boolean has_is_enabled;
  protobuf_c_boolean is_enabled;
  protobuf_c_boolean has_proxy_sharing_mode;
  ProtoTypes__ProxySharingMode proxy_sharing_mode;
};
#define PROTO_TYPES__SHARE_PROXY_GATEWAY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto_types__share_proxy_gateway__descriptor) \
    , 0, 0, 0, PROTO_TYPES__PROXY_SHARING_MODE__PROXY_SHARING_HTTP }


struct  ProtoTypes__PacketSize
{
  ProtobufCMessage base;
  protobuf_c_boolean has_is_automatic;
  protobuf_c_boolean is_automatic;
  /*
   * -1 not set
   */
  protobuf_c_boolean has_mtu;
  int32_t mtu;
};
#define PROTO_TYPES__PACKET_SIZE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto_types__packet_size__descriptor) \
    , 0, 1, 0, -1 }


struct  ProtoTypes__MacAddrSpoofing
{
  ProtobufCMessage base;
  protobuf_c_boolean has_is_enabled;
  protobuf_c_boolean is_enabled;
  char *mac_address;
  protobuf_c_boolean has_is_auto_rotate;
  protobuf_c_boolean is_auto_rotate;
  ProtoTypes__NetworkInterface *selected_network_interface;
  ProtoTypes__NetworkInterfaces *network_interfaces;
};
#define PROTO_TYPES__MAC_ADDR_SPOOFING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto_types__mac_addr_spoofing__descriptor) \
    , 0, 0, NULL, 0, 0, NULL, NULL }


struct  ProtoTypes__ConnectedDnsInfo
{
  ProtobufCMessage base;
  protobuf_c_boolean has_type;
  ProtoTypes__DnsWhileConnectedType type;
  char *ip_address;
};
extern char proto_types__dns_while_connected_info__ip_address__default_value[];
#define PROTO_TYPES__DNS_WHILE_CONNECTED_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto_types__dns_while_connected_info__descriptor) \
    , 0, PROTO_TYPES__CONNECTED_DNS_TYPE__CONNECTED_DNS_TYPE_ROBERT, proto_types__dns_while_connected_info__ip_address__default_value }


/*
 * engine settings, which can be changed by user from GUI
 */
struct  ProtoTypes__EngineSettings
{
  ProtobufCMessage base;
  char *language;
  protobuf_c_boolean has_update_channel;
  ProtoTypes__UpdateChannel update_channel;
  protobuf_c_boolean has_is_ignore_ssl_errors;
  protobuf_c_boolean is_ignore_ssl_errors;
  protobuf_c_boolean has_is_close_tcp_sockets;
  protobuf_c_boolean is_close_tcp_sockets;
  protobuf_c_boolean has_is_allow_lan_traffic;
  protobuf_c_boolean is_allow_lan_traffic;
  ProtoTypes__FirewallSettings *firewall_settings;
  ProtoTypes__ConnectionSettings *connection_settings;
  ProtoTypes__ApiResolution *api_resolution;
  ProtoTypes__ProxySettings *proxy_settings;
  /*
   * removed, don't use this fields numbers for new fields
   *optional string openvpn_version = 10;
   *optional ShareSecureHotspot share_secure_hotspot = 11;
   *optional ShareProxyGateway share_proxy_gateway = 12;
   *optional string advanced_parameters = 13;
   */
  ProtoTypes__PacketSize *packet_size;
  ProtoTypes__MacAddrSpoofing *mac_addr_spoofing;
  protobuf_c_boolean has_dns_policy;
  ProtoTypes__DnsPolicy dns_policy;
  protobuf_c_boolean has_tap_adapter;
  ProtoTypes__TapAdapterType tap_adapter;
  char *customovpnconfigspath;
  protobuf_c_boolean has_is_keep_alive_enabled;
  protobuf_c_boolean is_keep_alive_enabled;
  ProtoTypes__ConnectedDnsInfo *dns_while_connected_info;
  protobuf_c_boolean has_dns_manager;
  ProtoTypes__DnsManagerType dns_manager;
};
extern char proto_types__engine_settings__language__default_value[];
#define PROTO_TYPES__ENGINE_SETTINGS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto_types__engine_settings__descriptor) \
    , proto_types__engine_settings__language__default_value, 0, PROTO_TYPES__UPDATE_CHANNEL__UPDATE_CHANNEL_RELEASE, 0, 0, 0, 1, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, 0, PROTO_TYPES__DNS_POLICY__DNS_POLICY_OS_DEFAULT, 0, PROTO_TYPES__TAP_ADAPTER_TYPE__WINTUN_ADAPTER, NULL, 0, 0, NULL, 0, PROTO_TYPES__DNS_MANAGER_TYPE__DNS_MANAGER_AUTOMATIC }


struct  ProtoTypes__ProxySharingInfo
{
  ProtobufCMessage base;
  protobuf_c_boolean has_is_enabled;
  protobuf_c_boolean is_enabled;
  protobuf_c_boolean has_mode;
  ProtoTypes__ProxySharingMode mode;
  char *address;
  protobuf_c_boolean has_users_count;
  int32_t users_count;
};
#define PROTO_TYPES__PROXY_SHARING_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto_types__proxy_sharing_info__descriptor) \
    , 0, 0, 0, PROTO_TYPES__PROXY_SHARING_MODE__PROXY_SHARING_HTTP, NULL, 0, 0 }


struct  ProtoTypes__WifiSharingInfo
{
  ProtobufCMessage base;
  protobuf_c_boolean has_is_enabled;
  protobuf_c_boolean is_enabled;
  char *ssid;
  protobuf_c_boolean has_users_count;
  int32_t users_count;
};
#define PROTO_TYPES__WIFI_SHARING_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto_types__wifi_sharing_info__descriptor) \
    , 0, 0, NULL, 0, 0 }


/*
 * engine internal states, persistent between the starts of the program
 */
struct  ProtoTypes__EnginePersistentState
{
  ProtobufCMessage base;
};
#define PROTO_TYPES__ENGINE_PERSISTENT_STATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto_types__engine_persistent_state__descriptor) \
     }


struct  ProtoTypes__NetworkInterface
{
  ProtobufCMessage base;
  protobuf_c_boolean has_interface_index;
  int32_t interface_index;
  char *interface_name;
  char *interface_guid;
  char *network_or_ssid;
  protobuf_c_boolean has_interface_type;
  ProtoTypes__NetworkInterfaceType interface_type;
  protobuf_c_boolean has_trust_type;
  ProtoTypes__NetworkTrustType trust_type;
  protobuf_c_boolean has_active;
  protobuf_c_boolean active;
  char *friendly_name;
  protobuf_c_boolean has_requested;
  protobuf_c_boolean requested;
  protobuf_c_boolean has_metric;
  int32_t metric;
  char *physical_address;
  protobuf_c_boolean has_mtu;
  int32_t mtu;
  protobuf_c_boolean has_state;
  int32_t state;
  protobuf_c_boolean has_dw_type;
  int32_t dw_type;
  char *device_name;
  protobuf_c_boolean has_connector_present;
  protobuf_c_boolean connector_present;
  protobuf_c_boolean has_end_point_interface;
  protobuf_c_boolean end_point_interface;
};
#define PROTO_TYPES__NETWORK_INTERFACE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto_types__network_interface__descriptor) \
    , 0, 0, NULL, NULL, NULL, 0, PROTO_TYPES__NETWORK_INTERFACE_TYPE__NETWORK_INTERFACE_NONE, 0, PROTO_TYPES__NETWORK_TRUST_TYPE__NETWORK_SECURED, 0, 0, NULL, 0, 0, 0, 100, NULL, 0, 1470, 0, 0, 0, 0, NULL, 0, 0, 0, 0 }


struct  ProtoTypes__NetworkInterfaces
{
  ProtobufCMessage base;
  size_t n_networks;
  ProtoTypes__NetworkInterface **networks;
};
#define PROTO_TYPES__NETWORK_INTERFACES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto_types__network_interfaces__descriptor) \
    , 0,NULL }


/*
 * TODO: rename users to use NetworkInterfaces instead
 */
struct  ProtoTypes__NetworkWhiteList
{
  ProtobufCMessage base;
  size_t n_networks;
  ProtoTypes__NetworkInterface **networks;
};
#define PROTO_TYPES__NETWORK_WHITE_LIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto_types__network_white_list__descriptor) \
    , 0,NULL }


struct  ProtoTypes__BackgroundSettings
{
  ProtobufCMessage base;
  protobuf_c_boolean has_background_type;
  ProtoTypes__BackgroundType background_type;
  char *background_image_disconnected;
  char *background_image_connected;
};
#define PROTO_TYPES__BACKGROUND_SETTINGS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto_types__background_settings__descriptor) \
    , 0, PROTO_TYPES__BACKGROUND_TYPE__BACKGROUND_TYPE_COUNTRY_FLAGS, NULL, NULL }


/*
 * gui settings, which can be changed by user
 */
struct  ProtoTypes__GuiSettings
{
  ProtobufCMessage base;
  protobuf_c_boolean has_is_launch_on_startup;
  protobuf_c_boolean is_launch_on_startup;
  protobuf_c_boolean has_is_auto_connect;
  protobuf_c_boolean is_auto_connect;
  protobuf_c_boolean has_is_hide_from_dock;
  protobuf_c_boolean is_hide_from_dock;
  protobuf_c_boolean has_is_show_notifications;
  protobuf_c_boolean is_show_notifications;
  protobuf_c_boolean has_order_location;
  ProtoTypes__OrderLocationType order_location;
  protobuf_c_boolean has_latency_display;
  ProtoTypes__LatencyDisplayType latency_display;
  ProtoTypes__ShareSecureHotspot *share_secure_hotspot;
  ProtoTypes__ShareProxyGateway *share_proxy_gateway;
  ProtoTypes__SplitTunneling *split_tunneling;
  protobuf_c_boolean has_is_docked_to_tray;
  protobuf_c_boolean is_docked_to_tray;
  protobuf_c_boolean has_is_minimize_and_close_to_tray;
  protobuf_c_boolean is_minimize_and_close_to_tray;
  protobuf_c_boolean has_is_show_country_flags PROTOBUF_C__DEPRECATED;
  protobuf_c_boolean is_show_country_flags PROTOBUF_C__DEPRECATED;
  ProtoTypes__BackgroundSettings *background_settings;
  protobuf_c_boolean has_is_start_minimized;
  protobuf_c_boolean is_start_minimized;
  protobuf_c_boolean has_is_show_location_health;
  protobuf_c_boolean is_show_location_health;
};
#define PROTO_TYPES__GUI_SETTINGS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto_types__gui_settings__descriptor) \
    , 0, 1, 0, 0, 0, 0, 0, 0, 0, PROTO_TYPES__ORDER_LOCATION_TYPE__ORDER_LOCATION_BY_GEOGRAPHY, 0, PROTO_TYPES__LATENCY_DISPLAY_TYPE__LATENCY_DISPLAY_BARS, NULL, NULL, NULL, 0, 0, 0, 0, 0, 0, NULL, 0, 0, 0, 0 }


/*
 * gui internal states, persistent between the starts of the program
 */
struct  ProtoTypes__GuiPersistentState
{
  ProtobufCMessage base;
  protobuf_c_boolean has_is_firewall_on;
  protobuf_c_boolean is_firewall_on;
  protobuf_c_boolean has_window_offs_x;
  int32_t window_offs_x;
  protobuf_c_boolean has_window_offs_y;
  int32_t window_offs_y;
  protobuf_c_boolean has_count_visible_locations;
  int32_t count_visible_locations;
  protobuf_c_boolean has_is_first_login;
  protobuf_c_boolean is_first_login;
  protobuf_c_boolean has_is_ignore_cpu_usage_warnings;
  protobuf_c_boolean is_ignore_cpu_usage_warnings;
  ProtoTypes__LocationId *lastlocation;
  char *last_external_ip;
  ProtoTypes__NetworkWhiteList *network_white_list;
};
extern char proto_types__gui_persistent_state__last_external_ip__default_value[];
#define PROTO_TYPES__GUI_PERSISTENT_STATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto_types__gui_persistent_state__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 7, 0, 1, 0, 0, NULL, proto_types__gui_persistent_state__last_external_ip__default_value, NULL }


struct  ProtoTypes__SplitTunnelingApp
{
  ProtobufCMessage base;
  protobuf_c_boolean has_type;
  ProtoTypes__SplitTunnelingAppType type;
  char *name;
  /*
   * path + name
   */
  char *full_name;
  protobuf_c_boolean has_active;
  protobuf_c_boolean active;
};
#define PROTO_TYPES__SPLIT_TUNNELING_APP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto_types__split_tunneling_app__descriptor) \
    , 0, PROTO_TYPES__SPLIT_TUNNELING_APP_TYPE__SPLIT_TUNNELING_APP_TYPE_USER, NULL, NULL, 0, 0 }


struct  ProtoTypes__SplitTunnelingNetworkRoute
{
  ProtobufCMessage base;
  protobuf_c_boolean has_type;
  ProtoTypes__SplitTunnelingNetworkRouteType type;
  char *name;
};
#define PROTO_TYPES__SPLIT_TUNNELING_NETWORK_ROUTE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto_types__split_tunneling_network_route__descriptor) \
    , 0, PROTO_TYPES__SPLIT_TUNNELING_NETWORK_ROUTE_TYPE__SPLIT_TUNNELING_NETWORK_ROUTE_TYPE_IP, NULL }


struct  ProtoTypes__SplitTunnelingSettings
{
  ProtobufCMessage base;
  protobuf_c_boolean has_active;
  protobuf_c_boolean active;
  protobuf_c_boolean has_mode;
  ProtoTypes__SplitTunnelingMode mode;
};
#define PROTO_TYPES__SPLIT_TUNNELING_SETTINGS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto_types__split_tunneling_settings__descriptor) \
    , 0, 0, 0, PROTO_TYPES__SPLIT_TUNNELING_MODE__SPLIT_TUNNELING_MODE_EXCLUDE }


struct  ProtoTypes__SplitTunneling
{
  ProtobufCMessage base;
  ProtoTypes__SplitTunnelingSettings *settings;
  size_t n_apps;
  ProtoTypes__SplitTunnelingApp **apps;
  size_t n_network_routes;
  ProtoTypes__SplitTunnelingNetworkRoute **network_routes;
};
#define PROTO_TYPES__SPLIT_TUNNELING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto_types__split_tunneling__descriptor) \
    , NULL, 0,NULL, 0,NULL }


/* ProtoTypes__ApiNotification methods */
void   proto_types__api_notification__init
                     (ProtoTypes__ApiNotification         *message);
size_t proto_types__api_notification__get_packed_size
                     (const ProtoTypes__ApiNotification   *message);
size_t proto_types__api_notification__pack
                     (const ProtoTypes__ApiNotification   *message,
                      uint8_t             *out);
size_t proto_types__api_notification__pack_to_buffer
                     (const ProtoTypes__ApiNotification   *message,
                      ProtobufCBuffer     *buffer);
ProtoTypes__ApiNotification *
       proto_types__api_notification__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto_types__api_notification__free_unpacked
                     (ProtoTypes__ApiNotification *message,
                      ProtobufCAllocator *allocator);
/* ProtoTypes__City methods */
void   proto_types__city__init
                     (ProtoTypes__City         *message);
size_t proto_types__city__get_packed_size
                     (const ProtoTypes__City   *message);
size_t proto_types__city__pack
                     (const ProtoTypes__City   *message,
                      uint8_t             *out);
size_t proto_types__city__pack_to_buffer
                     (const ProtoTypes__City   *message,
                      ProtobufCBuffer     *buffer);
ProtoTypes__City *
       proto_types__city__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto_types__city__free_unpacked
                     (ProtoTypes__City *message,
                      ProtobufCAllocator *allocator);
/* ProtoTypes__Location methods */
void   proto_types__location__init
                     (ProtoTypes__Location         *message);
size_t proto_types__location__get_packed_size
                     (const ProtoTypes__Location   *message);
size_t proto_types__location__pack
                     (const ProtoTypes__Location   *message,
                      uint8_t             *out);
size_t proto_types__location__pack_to_buffer
                     (const ProtoTypes__Location   *message,
                      ProtobufCBuffer     *buffer);
ProtoTypes__Location *
       proto_types__location__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto_types__location__free_unpacked
                     (ProtoTypes__Location *message,
                      ProtobufCAllocator *allocator);
/* ProtoTypes__LocationId methods */
void   proto_types__location_id__init
                     (ProtoTypes__LocationId         *message);
size_t proto_types__location_id__get_packed_size
                     (const ProtoTypes__LocationId   *message);
size_t proto_types__location_id__pack
                     (const ProtoTypes__LocationId   *message,
                      uint8_t             *out);
size_t proto_types__location_id__pack_to_buffer
                     (const ProtoTypes__LocationId   *message,
                      ProtobufCBuffer     *buffer);
ProtoTypes__LocationId *
       proto_types__location_id__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto_types__location_id__free_unpacked
                     (ProtoTypes__LocationId *message,
                      ProtobufCAllocator *allocator);
/* ProtoTypes__ArrayLocationId methods */
void   proto_types__array_location_id__init
                     (ProtoTypes__ArrayLocationId         *message);
size_t proto_types__array_location_id__get_packed_size
                     (const ProtoTypes__ArrayLocationId   *message);
size_t proto_types__array_location_id__pack
                     (const ProtoTypes__ArrayLocationId   *message,
                      uint8_t             *out);
size_t proto_types__array_location_id__pack_to_buffer
                     (const ProtoTypes__ArrayLocationId   *message,
                      ProtobufCBuffer     *buffer);
ProtoTypes__ArrayLocationId *
       proto_types__array_location_id__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto_types__array_location_id__free_unpacked
                     (ProtoTypes__ArrayLocationId *message,
                      ProtobufCAllocator *allocator);
/* ProtoTypes__SessionStatus methods */
void   proto_types__session_status__init
                     (ProtoTypes__SessionStatus         *message);
size_t proto_types__session_status__get_packed_size
                     (const ProtoTypes__SessionStatus   *message);
size_t proto_types__session_status__pack
                     (const ProtoTypes__SessionStatus   *message,
                      uint8_t             *out);
size_t proto_types__session_status__pack_to_buffer
                     (const ProtoTypes__SessionStatus   *message,
                      ProtobufCBuffer     *buffer);
ProtoTypes__SessionStatus *
       proto_types__session_status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto_types__session_status__free_unpacked
                     (ProtoTypes__SessionStatus *message,
                      ProtobufCAllocator *allocator);
/* ProtoTypes__CheckUpdateInfo methods */
void   proto_types__check_update_info__init
                     (ProtoTypes__CheckUpdateInfo         *message);
size_t proto_types__check_update_info__get_packed_size
                     (const ProtoTypes__CheckUpdateInfo   *message);
size_t proto_types__check_update_info__pack
                     (const ProtoTypes__CheckUpdateInfo   *message,
                      uint8_t             *out);
size_t proto_types__check_update_info__pack_to_buffer
                     (const ProtoTypes__CheckUpdateInfo   *message,
                      ProtobufCBuffer     *buffer);
ProtoTypes__CheckUpdateInfo *
       proto_types__check_update_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto_types__check_update_info__free_unpacked
                     (ProtoTypes__CheckUpdateInfo *message,
                      ProtobufCAllocator *allocator);
/* ProtoTypes__MyIpInfo methods */
void   proto_types__my_ip_info__init
                     (ProtoTypes__MyIpInfo         *message);
size_t proto_types__my_ip_info__get_packed_size
                     (const ProtoTypes__MyIpInfo   *message);
size_t proto_types__my_ip_info__pack
                     (const ProtoTypes__MyIpInfo   *message,
                      uint8_t             *out);
size_t proto_types__my_ip_info__pack_to_buffer
                     (const ProtoTypes__MyIpInfo   *message,
                      ProtobufCBuffer     *buffer);
ProtoTypes__MyIpInfo *
       proto_types__my_ip_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto_types__my_ip_info__free_unpacked
                     (ProtoTypes__MyIpInfo *message,
                      ProtobufCAllocator *allocator);
/* ProtoTypes__PortMapItem methods */
void   proto_types__port_map_item__init
                     (ProtoTypes__PortMapItem         *message);
size_t proto_types__port_map_item__get_packed_size
                     (const ProtoTypes__PortMapItem   *message);
size_t proto_types__port_map_item__pack
                     (const ProtoTypes__PortMapItem   *message,
                      uint8_t             *out);
size_t proto_types__port_map_item__pack_to_buffer
                     (const ProtoTypes__PortMapItem   *message,
                      ProtobufCBuffer     *buffer);
ProtoTypes__PortMapItem *
       proto_types__port_map_item__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto_types__port_map_item__free_unpacked
                     (ProtoTypes__PortMapItem *message,
                      ProtobufCAllocator *allocator);
/* ProtoTypes__ArrayPortMap methods */
void   proto_types__array_port_map__init
                     (ProtoTypes__ArrayPortMap         *message);
size_t proto_types__array_port_map__get_packed_size
                     (const ProtoTypes__ArrayPortMap   *message);
size_t proto_types__array_port_map__pack
                     (const ProtoTypes__ArrayPortMap   *message,
                      uint8_t             *out);
size_t proto_types__array_port_map__pack_to_buffer
                     (const ProtoTypes__ArrayPortMap   *message,
                      ProtobufCBuffer     *buffer);
ProtoTypes__ArrayPortMap *
       proto_types__array_port_map__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto_types__array_port_map__free_unpacked
                     (ProtoTypes__ArrayPortMap *message,
                      ProtobufCAllocator *allocator);
/* ProtoTypes__LoginInfo methods */
void   proto_types__login_info__init
                     (ProtoTypes__LoginInfo         *message);
size_t proto_types__login_info__get_packed_size
                     (const ProtoTypes__LoginInfo   *message);
size_t proto_types__login_info__pack
                     (const ProtoTypes__LoginInfo   *message,
                      uint8_t             *out);
size_t proto_types__login_info__pack_to_buffer
                     (const ProtoTypes__LoginInfo   *message,
                      ProtobufCBuffer     *buffer);
ProtoTypes__LoginInfo *
       proto_types__login_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto_types__login_info__free_unpacked
                     (ProtoTypes__LoginInfo *message,
                      ProtobufCAllocator *allocator);
/* ProtoTypes__ConnectState methods */
void   proto_types__connect_state__init
                     (ProtoTypes__ConnectState         *message);
size_t proto_types__connect_state__get_packed_size
                     (const ProtoTypes__ConnectState   *message);
size_t proto_types__connect_state__pack
                     (const ProtoTypes__ConnectState   *message,
                      uint8_t             *out);
size_t proto_types__connect_state__pack_to_buffer
                     (const ProtoTypes__ConnectState   *message,
                      ProtobufCBuffer     *buffer);
ProtoTypes__ConnectState *
       proto_types__connect_state__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto_types__connect_state__free_unpacked
                     (ProtoTypes__ConnectState *message,
                      ProtobufCAllocator *allocator);
/* ProtoTypes__ArrayApiNotification methods */
void   proto_types__array_api_notification__init
                     (ProtoTypes__ArrayApiNotification         *message);
size_t proto_types__array_api_notification__get_packed_size
                     (const ProtoTypes__ArrayApiNotification   *message);
size_t proto_types__array_api_notification__pack
                     (const ProtoTypes__ArrayApiNotification   *message,
                      uint8_t             *out);
size_t proto_types__array_api_notification__pack_to_buffer
                     (const ProtoTypes__ArrayApiNotification   *message,
                      ProtobufCBuffer     *buffer);
ProtoTypes__ArrayApiNotification *
       proto_types__array_api_notification__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto_types__array_api_notification__free_unpacked
                     (ProtoTypes__ArrayApiNotification *message,
                      ProtobufCAllocator *allocator);
/* ProtoTypes__ArrayLocations methods */
void   proto_types__array_locations__init
                     (ProtoTypes__ArrayLocations         *message);
size_t proto_types__array_locations__get_packed_size
                     (const ProtoTypes__ArrayLocations   *message);
size_t proto_types__array_locations__pack
                     (const ProtoTypes__ArrayLocations   *message,
                      uint8_t             *out);
size_t proto_types__array_locations__pack_to_buffer
                     (const ProtoTypes__ArrayLocations   *message,
                      ProtobufCBuffer     *buffer);
ProtoTypes__ArrayLocations *
       proto_types__array_locations__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto_types__array_locations__free_unpacked
                     (ProtoTypes__ArrayLocations *message,
                      ProtobufCAllocator *allocator);
/* ProtoTypes__ConnectionSettings methods */
void   proto_types__connection_settings__init
                     (ProtoTypes__ConnectionSettings         *message);
size_t proto_types__connection_settings__get_packed_size
                     (const ProtoTypes__ConnectionSettings   *message);
size_t proto_types__connection_settings__pack
                     (const ProtoTypes__ConnectionSettings   *message,
                      uint8_t             *out);
size_t proto_types__connection_settings__pack_to_buffer
                     (const ProtoTypes__ConnectionSettings   *message,
                      ProtobufCBuffer     *buffer);
ProtoTypes__ConnectionSettings *
       proto_types__connection_settings__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto_types__connection_settings__free_unpacked
                     (ProtoTypes__ConnectionSettings *message,
                      ProtobufCAllocator *allocator);
/* ProtoTypes__ApiResolution methods */
void   proto_types__api_resolution__init
                     (ProtoTypes__ApiResolution         *message);
size_t proto_types__api_resolution__get_packed_size
                     (const ProtoTypes__ApiResolution   *message);
size_t proto_types__api_resolution__pack
                     (const ProtoTypes__ApiResolution   *message,
                      uint8_t             *out);
size_t proto_types__api_resolution__pack_to_buffer
                     (const ProtoTypes__ApiResolution   *message,
                      ProtobufCBuffer     *buffer);
ProtoTypes__ApiResolution *
       proto_types__api_resolution__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto_types__api_resolution__free_unpacked
                     (ProtoTypes__ApiResolution *message,
                      ProtobufCAllocator *allocator);
/* ProtoTypes__ProxySettings methods */
void   proto_types__proxy_settings__init
                     (ProtoTypes__ProxySettings         *message);
size_t proto_types__proxy_settings__get_packed_size
                     (const ProtoTypes__ProxySettings   *message);
size_t proto_types__proxy_settings__pack
                     (const ProtoTypes__ProxySettings   *message,
                      uint8_t             *out);
size_t proto_types__proxy_settings__pack_to_buffer
                     (const ProtoTypes__ProxySettings   *message,
                      ProtobufCBuffer     *buffer);
ProtoTypes__ProxySettings *
       proto_types__proxy_settings__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto_types__proxy_settings__free_unpacked
                     (ProtoTypes__ProxySettings *message,
                      ProtobufCAllocator *allocator);
/* ProtoTypes__FirewallSettings methods */
void   proto_types__firewall_settings__init
                     (ProtoTypes__FirewallSettings         *message);
size_t proto_types__firewall_settings__get_packed_size
                     (const ProtoTypes__FirewallSettings   *message);
size_t proto_types__firewall_settings__pack
                     (const ProtoTypes__FirewallSettings   *message,
                      uint8_t             *out);
size_t proto_types__firewall_settings__pack_to_buffer
                     (const ProtoTypes__FirewallSettings   *message,
                      ProtobufCBuffer     *buffer);
ProtoTypes__FirewallSettings *
       proto_types__firewall_settings__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto_types__firewall_settings__free_unpacked
                     (ProtoTypes__FirewallSettings *message,
                      ProtobufCAllocator *allocator);
/* ProtoTypes__ShareSecureHotspot methods */
void   proto_types__share_secure_hotspot__init
                     (ProtoTypes__ShareSecureHotspot         *message);
size_t proto_types__share_secure_hotspot__get_packed_size
                     (const ProtoTypes__ShareSecureHotspot   *message);
size_t proto_types__share_secure_hotspot__pack
                     (const ProtoTypes__ShareSecureHotspot   *message,
                      uint8_t             *out);
size_t proto_types__share_secure_hotspot__pack_to_buffer
                     (const ProtoTypes__ShareSecureHotspot   *message,
                      ProtobufCBuffer     *buffer);
ProtoTypes__ShareSecureHotspot *
       proto_types__share_secure_hotspot__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto_types__share_secure_hotspot__free_unpacked
                     (ProtoTypes__ShareSecureHotspot *message,
                      ProtobufCAllocator *allocator);
/* ProtoTypes__ShareProxyGateway methods */
void   proto_types__share_proxy_gateway__init
                     (ProtoTypes__ShareProxyGateway         *message);
size_t proto_types__share_proxy_gateway__get_packed_size
                     (const ProtoTypes__ShareProxyGateway   *message);
size_t proto_types__share_proxy_gateway__pack
                     (const ProtoTypes__ShareProxyGateway   *message,
                      uint8_t             *out);
size_t proto_types__share_proxy_gateway__pack_to_buffer
                     (const ProtoTypes__ShareProxyGateway   *message,
                      ProtobufCBuffer     *buffer);
ProtoTypes__ShareProxyGateway *
       proto_types__share_proxy_gateway__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto_types__share_proxy_gateway__free_unpacked
                     (ProtoTypes__ShareProxyGateway *message,
                      ProtobufCAllocator *allocator);
/* ProtoTypes__PacketSize methods */
void   proto_types__packet_size__init
                     (ProtoTypes__PacketSize         *message);
size_t proto_types__packet_size__get_packed_size
                     (const ProtoTypes__PacketSize   *message);
size_t proto_types__packet_size__pack
                     (const ProtoTypes__PacketSize   *message,
                      uint8_t             *out);
size_t proto_types__packet_size__pack_to_buffer
                     (const ProtoTypes__PacketSize   *message,
                      ProtobufCBuffer     *buffer);
ProtoTypes__PacketSize *
       proto_types__packet_size__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto_types__packet_size__free_unpacked
                     (ProtoTypes__PacketSize *message,
                      ProtobufCAllocator *allocator);
/* ProtoTypes__MacAddrSpoofing methods */
void   proto_types__mac_addr_spoofing__init
                     (ProtoTypes__MacAddrSpoofing         *message);
size_t proto_types__mac_addr_spoofing__get_packed_size
                     (const ProtoTypes__MacAddrSpoofing   *message);
size_t proto_types__mac_addr_spoofing__pack
                     (const ProtoTypes__MacAddrSpoofing   *message,
                      uint8_t             *out);
size_t proto_types__mac_addr_spoofing__pack_to_buffer
                     (const ProtoTypes__MacAddrSpoofing   *message,
                      ProtobufCBuffer     *buffer);
ProtoTypes__MacAddrSpoofing *
       proto_types__mac_addr_spoofing__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto_types__mac_addr_spoofing__free_unpacked
                     (ProtoTypes__MacAddrSpoofing *message,
                      ProtobufCAllocator *allocator);
/* ProtoTypes__ConnectedDnsInfo methods */
void   proto_types__dns_while_connected_info__init
                     (ProtoTypes__ConnectedDnsInfo         *message);
size_t proto_types__dns_while_connected_info__get_packed_size
                     (const ProtoTypes__ConnectedDnsInfo   *message);
size_t proto_types__dns_while_connected_info__pack
                     (const ProtoTypes__ConnectedDnsInfo   *message,
                      uint8_t             *out);
size_t proto_types__dns_while_connected_info__pack_to_buffer
                     (const ProtoTypes__ConnectedDnsInfo   *message,
                      ProtobufCBuffer     *buffer);
ProtoTypes__ConnectedDnsInfo *
       proto_types__dns_while_connected_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto_types__dns_while_connected_info__free_unpacked
                     (ProtoTypes__ConnectedDnsInfo *message,
                      ProtobufCAllocator *allocator);
/* ProtoTypes__EngineSettings methods */
void   proto_types__engine_settings__init
                     (ProtoTypes__EngineSettings         *message);
size_t proto_types__engine_settings__get_packed_size
                     (const ProtoTypes__EngineSettings   *message);
size_t proto_types__engine_settings__pack
                     (const ProtoTypes__EngineSettings   *message,
                      uint8_t             *out);
size_t proto_types__engine_settings__pack_to_buffer
                     (const ProtoTypes__EngineSettings   *message,
                      ProtobufCBuffer     *buffer);
ProtoTypes__EngineSettings *
       proto_types__engine_settings__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto_types__engine_settings__free_unpacked
                     (ProtoTypes__EngineSettings *message,
                      ProtobufCAllocator *allocator);
/* ProtoTypes__ProxySharingInfo methods */
void   proto_types__proxy_sharing_info__init
                     (ProtoTypes__ProxySharingInfo         *message);
size_t proto_types__proxy_sharing_info__get_packed_size
                     (const ProtoTypes__ProxySharingInfo   *message);
size_t proto_types__proxy_sharing_info__pack
                     (const ProtoTypes__ProxySharingInfo   *message,
                      uint8_t             *out);
size_t proto_types__proxy_sharing_info__pack_to_buffer
                     (const ProtoTypes__ProxySharingInfo   *message,
                      ProtobufCBuffer     *buffer);
ProtoTypes__ProxySharingInfo *
       proto_types__proxy_sharing_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto_types__proxy_sharing_info__free_unpacked
                     (ProtoTypes__ProxySharingInfo *message,
                      ProtobufCAllocator *allocator);
/* ProtoTypes__WifiSharingInfo methods */
void   proto_types__wifi_sharing_info__init
                     (ProtoTypes__WifiSharingInfo         *message);
size_t proto_types__wifi_sharing_info__get_packed_size
                     (const ProtoTypes__WifiSharingInfo   *message);
size_t proto_types__wifi_sharing_info__pack
                     (const ProtoTypes__WifiSharingInfo   *message,
                      uint8_t             *out);
size_t proto_types__wifi_sharing_info__pack_to_buffer
                     (const ProtoTypes__WifiSharingInfo   *message,
                      ProtobufCBuffer     *buffer);
ProtoTypes__WifiSharingInfo *
       proto_types__wifi_sharing_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto_types__wifi_sharing_info__free_unpacked
                     (ProtoTypes__WifiSharingInfo *message,
                      ProtobufCAllocator *allocator);
/* ProtoTypes__EnginePersistentState methods */
void   proto_types__engine_persistent_state__init
                     (ProtoTypes__EnginePersistentState         *message);
size_t proto_types__engine_persistent_state__get_packed_size
                     (const ProtoTypes__EnginePersistentState   *message);
size_t proto_types__engine_persistent_state__pack
                     (const ProtoTypes__EnginePersistentState   *message,
                      uint8_t             *out);
size_t proto_types__engine_persistent_state__pack_to_buffer
                     (const ProtoTypes__EnginePersistentState   *message,
                      ProtobufCBuffer     *buffer);
ProtoTypes__EnginePersistentState *
       proto_types__engine_persistent_state__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto_types__engine_persistent_state__free_unpacked
                     (ProtoTypes__EnginePersistentState *message,
                      ProtobufCAllocator *allocator);
/* ProtoTypes__NetworkInterface methods */
void   proto_types__network_interface__init
                     (ProtoTypes__NetworkInterface         *message);
size_t proto_types__network_interface__get_packed_size
                     (const ProtoTypes__NetworkInterface   *message);
size_t proto_types__network_interface__pack
                     (const ProtoTypes__NetworkInterface   *message,
                      uint8_t             *out);
size_t proto_types__network_interface__pack_to_buffer
                     (const ProtoTypes__NetworkInterface   *message,
                      ProtobufCBuffer     *buffer);
ProtoTypes__NetworkInterface *
       proto_types__network_interface__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto_types__network_interface__free_unpacked
                     (ProtoTypes__NetworkInterface *message,
                      ProtobufCAllocator *allocator);
/* ProtoTypes__NetworkInterfaces methods */
void   proto_types__network_interfaces__init
                     (ProtoTypes__NetworkInterfaces         *message);
size_t proto_types__network_interfaces__get_packed_size
                     (const ProtoTypes__NetworkInterfaces   *message);
size_t proto_types__network_interfaces__pack
                     (const ProtoTypes__NetworkInterfaces   *message,
                      uint8_t             *out);
size_t proto_types__network_interfaces__pack_to_buffer
                     (const ProtoTypes__NetworkInterfaces   *message,
                      ProtobufCBuffer     *buffer);
ProtoTypes__NetworkInterfaces *
       proto_types__network_interfaces__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto_types__network_interfaces__free_unpacked
                     (ProtoTypes__NetworkInterfaces *message,
                      ProtobufCAllocator *allocator);
/* ProtoTypes__NetworkWhiteList methods */
void   proto_types__network_white_list__init
                     (ProtoTypes__NetworkWhiteList         *message);
size_t proto_types__network_white_list__get_packed_size
                     (const ProtoTypes__NetworkWhiteList   *message);
size_t proto_types__network_white_list__pack
                     (const ProtoTypes__NetworkWhiteList   *message,
                      uint8_t             *out);
size_t proto_types__network_white_list__pack_to_buffer
                     (const ProtoTypes__NetworkWhiteList   *message,
                      ProtobufCBuffer     *buffer);
ProtoTypes__NetworkWhiteList *
       proto_types__network_white_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto_types__network_white_list__free_unpacked
                     (ProtoTypes__NetworkWhiteList *message,
                      ProtobufCAllocator *allocator);
/* ProtoTypes__BackgroundSettings methods */
void   proto_types__background_settings__init
                     (ProtoTypes__BackgroundSettings         *message);
size_t proto_types__background_settings__get_packed_size
                     (const ProtoTypes__BackgroundSettings   *message);
size_t proto_types__background_settings__pack
                     (const ProtoTypes__BackgroundSettings   *message,
                      uint8_t             *out);
size_t proto_types__background_settings__pack_to_buffer
                     (const ProtoTypes__BackgroundSettings   *message,
                      ProtobufCBuffer     *buffer);
ProtoTypes__BackgroundSettings *
       proto_types__background_settings__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto_types__background_settings__free_unpacked
                     (ProtoTypes__BackgroundSettings *message,
                      ProtobufCAllocator *allocator);
/* ProtoTypes__GuiSettings methods */
void   proto_types__gui_settings__init
                     (ProtoTypes__GuiSettings         *message);
size_t proto_types__gui_settings__get_packed_size
                     (const ProtoTypes__GuiSettings   *message);
size_t proto_types__gui_settings__pack
                     (const ProtoTypes__GuiSettings   *message,
                      uint8_t             *out);
size_t proto_types__gui_settings__pack_to_buffer
                     (const ProtoTypes__GuiSettings   *message,
                      ProtobufCBuffer     *buffer);
ProtoTypes__GuiSettings *
       proto_types__gui_settings__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto_types__gui_settings__free_unpacked
                     (ProtoTypes__GuiSettings *message,
                      ProtobufCAllocator *allocator);
/* ProtoTypes__GuiPersistentState methods */
void   proto_types__gui_persistent_state__init
                     (ProtoTypes__GuiPersistentState         *message);
size_t proto_types__gui_persistent_state__get_packed_size
                     (const ProtoTypes__GuiPersistentState   *message);
size_t proto_types__gui_persistent_state__pack
                     (const ProtoTypes__GuiPersistentState   *message,
                      uint8_t             *out);
size_t proto_types__gui_persistent_state__pack_to_buffer
                     (const ProtoTypes__GuiPersistentState   *message,
                      ProtobufCBuffer     *buffer);
ProtoTypes__GuiPersistentState *
       proto_types__gui_persistent_state__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto_types__gui_persistent_state__free_unpacked
                     (ProtoTypes__GuiPersistentState *message,
                      ProtobufCAllocator *allocator);
/* ProtoTypes__SplitTunnelingApp methods */
void   proto_types__split_tunneling_app__init
                     (ProtoTypes__SplitTunnelingApp         *message);
size_t proto_types__split_tunneling_app__get_packed_size
                     (const ProtoTypes__SplitTunnelingApp   *message);
size_t proto_types__split_tunneling_app__pack
                     (const ProtoTypes__SplitTunnelingApp   *message,
                      uint8_t             *out);
size_t proto_types__split_tunneling_app__pack_to_buffer
                     (const ProtoTypes__SplitTunnelingApp   *message,
                      ProtobufCBuffer     *buffer);
ProtoTypes__SplitTunnelingApp *
       proto_types__split_tunneling_app__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto_types__split_tunneling_app__free_unpacked
                     (ProtoTypes__SplitTunnelingApp *message,
                      ProtobufCAllocator *allocator);
/* ProtoTypes__SplitTunnelingNetworkRoute methods */
void   proto_types__split_tunneling_network_route__init
                     (ProtoTypes__SplitTunnelingNetworkRoute         *message);
size_t proto_types__split_tunneling_network_route__get_packed_size
                     (const ProtoTypes__SplitTunnelingNetworkRoute   *message);
size_t proto_types__split_tunneling_network_route__pack
                     (const ProtoTypes__SplitTunnelingNetworkRoute   *message,
                      uint8_t             *out);
size_t proto_types__split_tunneling_network_route__pack_to_buffer
                     (const ProtoTypes__SplitTunnelingNetworkRoute   *message,
                      ProtobufCBuffer     *buffer);
ProtoTypes__SplitTunnelingNetworkRoute *
       proto_types__split_tunneling_network_route__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto_types__split_tunneling_network_route__free_unpacked
                     (ProtoTypes__SplitTunnelingNetworkRoute *message,
                      ProtobufCAllocator *allocator);
/* ProtoTypes__SplitTunnelingSettings methods */
void   proto_types__split_tunneling_settings__init
                     (ProtoTypes__SplitTunnelingSettings         *message);
size_t proto_types__split_tunneling_settings__get_packed_size
                     (const ProtoTypes__SplitTunnelingSettings   *message);
size_t proto_types__split_tunneling_settings__pack
                     (const ProtoTypes__SplitTunnelingSettings   *message,
                      uint8_t             *out);
size_t proto_types__split_tunneling_settings__pack_to_buffer
                     (const ProtoTypes__SplitTunnelingSettings   *message,
                      ProtobufCBuffer     *buffer);
ProtoTypes__SplitTunnelingSettings *
       proto_types__split_tunneling_settings__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto_types__split_tunneling_settings__free_unpacked
                     (ProtoTypes__SplitTunnelingSettings *message,
                      ProtobufCAllocator *allocator);
/* ProtoTypes__SplitTunneling methods */
void   proto_types__split_tunneling__init
                     (ProtoTypes__SplitTunneling         *message);
size_t proto_types__split_tunneling__get_packed_size
                     (const ProtoTypes__SplitTunneling   *message);
size_t proto_types__split_tunneling__pack
                     (const ProtoTypes__SplitTunneling   *message,
                      uint8_t             *out);
size_t proto_types__split_tunneling__pack_to_buffer
                     (const ProtoTypes__SplitTunneling   *message,
                      ProtobufCBuffer     *buffer);
ProtoTypes__SplitTunneling *
       proto_types__split_tunneling__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto_types__split_tunneling__free_unpacked
                     (ProtoTypes__SplitTunneling *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*ProtoTypes__ApiNotification_Closure)
                 (const ProtoTypes__ApiNotification *message,
                  void *closure_data);
typedef void (*ProtoTypes__City_Closure)
                 (const ProtoTypes__City *message,
                  void *closure_data);
typedef void (*ProtoTypes__Location_Closure)
                 (const ProtoTypes__Location *message,
                  void *closure_data);
typedef void (*ProtoTypes__LocationId_Closure)
                 (const ProtoTypes__LocationId *message,
                  void *closure_data);
typedef void (*ProtoTypes__ArrayLocationId_Closure)
                 (const ProtoTypes__ArrayLocationId *message,
                  void *closure_data);
typedef void (*ProtoTypes__SessionStatus_Closure)
                 (const ProtoTypes__SessionStatus *message,
                  void *closure_data);
typedef void (*ProtoTypes__CheckUpdateInfo_Closure)
                 (const ProtoTypes__CheckUpdateInfo *message,
                  void *closure_data);
typedef void (*ProtoTypes__MyIpInfo_Closure)
                 (const ProtoTypes__MyIpInfo *message,
                  void *closure_data);
typedef void (*ProtoTypes__PortMapItem_Closure)
                 (const ProtoTypes__PortMapItem *message,
                  void *closure_data);
typedef void (*ProtoTypes__ArrayPortMap_Closure)
                 (const ProtoTypes__ArrayPortMap *message,
                  void *closure_data);
typedef void (*ProtoTypes__LoginInfo_Closure)
                 (const ProtoTypes__LoginInfo *message,
                  void *closure_data);
typedef void (*ProtoTypes__ConnectState_Closure)
                 (const ProtoTypes__ConnectState *message,
                  void *closure_data);
typedef void (*ProtoTypes__ArrayApiNotification_Closure)
                 (const ProtoTypes__ArrayApiNotification *message,
                  void *closure_data);
typedef void (*ProtoTypes__ArrayLocations_Closure)
                 (const ProtoTypes__ArrayLocations *message,
                  void *closure_data);
typedef void (*ProtoTypes__ConnectionSettings_Closure)
                 (const ProtoTypes__ConnectionSettings *message,
                  void *closure_data);
typedef void (*ProtoTypes__ApiResolution_Closure)
                 (const ProtoTypes__ApiResolution *message,
                  void *closure_data);
typedef void (*ProtoTypes__ProxySettings_Closure)
                 (const ProtoTypes__ProxySettings *message,
                  void *closure_data);
typedef void (*ProtoTypes__FirewallSettings_Closure)
                 (const ProtoTypes__FirewallSettings *message,
                  void *closure_data);
typedef void (*ProtoTypes__ShareSecureHotspot_Closure)
                 (const ProtoTypes__ShareSecureHotspot *message,
                  void *closure_data);
typedef void (*ProtoTypes__ShareProxyGateway_Closure)
                 (const ProtoTypes__ShareProxyGateway *message,
                  void *closure_data);
typedef void (*ProtoTypes__PacketSize_Closure)
                 (const ProtoTypes__PacketSize *message,
                  void *closure_data);
typedef void (*ProtoTypes__MacAddrSpoofing_Closure)
                 (const ProtoTypes__MacAddrSpoofing *message,
                  void *closure_data);
typedef void (*ProtoTypes__ConnectedDnsInfo_Closure)
                 (const ProtoTypes__ConnectedDnsInfo *message,
                  void *closure_data);
typedef void (*ProtoTypes__EngineSettings_Closure)
                 (const ProtoTypes__EngineSettings *message,
                  void *closure_data);
typedef void (*ProtoTypes__ProxySharingInfo_Closure)
                 (const ProtoTypes__ProxySharingInfo *message,
                  void *closure_data);
typedef void (*ProtoTypes__WifiSharingInfo_Closure)
                 (const ProtoTypes__WifiSharingInfo *message,
                  void *closure_data);
typedef void (*ProtoTypes__EnginePersistentState_Closure)
                 (const ProtoTypes__EnginePersistentState *message,
                  void *closure_data);
typedef void (*ProtoTypes__NetworkInterface_Closure)
                 (const ProtoTypes__NetworkInterface *message,
                  void *closure_data);
typedef void (*ProtoTypes__NetworkInterfaces_Closure)
                 (const ProtoTypes__NetworkInterfaces *message,
                  void *closure_data);
typedef void (*ProtoTypes__NetworkWhiteList_Closure)
                 (const ProtoTypes__NetworkWhiteList *message,
                  void *closure_data);
typedef void (*ProtoTypes__BackgroundSettings_Closure)
                 (const ProtoTypes__BackgroundSettings *message,
                  void *closure_data);
typedef void (*ProtoTypes__GuiSettings_Closure)
                 (const ProtoTypes__GuiSettings *message,
                  void *closure_data);
typedef void (*ProtoTypes__GuiPersistentState_Closure)
                 (const ProtoTypes__GuiPersistentState *message,
                  void *closure_data);
typedef void (*ProtoTypes__SplitTunnelingApp_Closure)
                 (const ProtoTypes__SplitTunnelingApp *message,
                  void *closure_data);
typedef void (*ProtoTypes__SplitTunnelingNetworkRoute_Closure)
                 (const ProtoTypes__SplitTunnelingNetworkRoute *message,
                  void *closure_data);
typedef void (*ProtoTypes__SplitTunnelingSettings_Closure)
                 (const ProtoTypes__SplitTunnelingSettings *message,
                  void *closure_data);
typedef void (*ProtoTypes__SplitTunneling_Closure)
                 (const ProtoTypes__SplitTunneling *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    proto_types__connect_state_type__descriptor;
extern const ProtobufCEnumDescriptor    proto_types__client_id__descriptor;
extern const ProtobufCEnumDescriptor    proto_types__connect_error__descriptor;
extern const ProtobufCEnumDescriptor    proto_types__disconnect_reason__descriptor;
extern const ProtobufCEnumDescriptor    proto_types__init_state__descriptor;
extern const ProtobufCEnumDescriptor    proto_types__login_state__descriptor;
extern const ProtobufCEnumDescriptor    proto_types__login_error__descriptor;
extern const ProtobufCEnumDescriptor    proto_types__login_message__descriptor;
extern const ProtobufCEnumDescriptor    proto_types__custom_config_type__descriptor;
extern const ProtobufCEnumDescriptor    proto_types__protocol__descriptor;
extern const ProtobufCEnumDescriptor    proto_types__proxy_option__descriptor;
extern const ProtobufCEnumDescriptor    proto_types__firewall_mode__descriptor;
extern const ProtobufCEnumDescriptor    proto_types__firewall_when__descriptor;
extern const ProtobufCEnumDescriptor    proto_types__update_channel__descriptor;
extern const ProtobufCEnumDescriptor    proto_types__proxy_sharing_mode__descriptor;
extern const ProtobufCEnumDescriptor    proto_types__dns_policy__descriptor;
extern const ProtobufCEnumDescriptor    proto_types__dns_while_connected_type__descriptor;
extern const ProtobufCEnumDescriptor    proto_types__dns_manager_type__descriptor;
extern const ProtobufCEnumDescriptor    proto_types__tap_adapter_type__descriptor;
extern const ProtobufCEnumDescriptor    proto_types__network_interface_type__descriptor;
extern const ProtobufCEnumDescriptor    proto_types__network_trust_type__descriptor;
extern const ProtobufCEnumDescriptor    proto_types__user_warning_type__descriptor;
extern const ProtobufCEnumDescriptor    proto_types__order_location_type__descriptor;
extern const ProtobufCEnumDescriptor    proto_types__latency_display_type__descriptor;
extern const ProtobufCEnumDescriptor    proto_types__background_type__descriptor;
extern const ProtobufCEnumDescriptor    proto_types__split_tunneling_app_type__descriptor;
extern const ProtobufCEnumDescriptor    proto_types__split_tunneling_mode__descriptor;
extern const ProtobufCEnumDescriptor    proto_types__split_tunneling_network_route_type__descriptor;
extern const ProtobufCEnumDescriptor    proto_types__update_version_state__descriptor;
extern const ProtobufCEnumDescriptor    proto_types__update_version_error__descriptor;
extern const ProtobufCEnumDescriptor    proto_types__web_session_purpose__descriptor;
extern const ProtobufCMessageDescriptor proto_types__api_notification__descriptor;
extern const ProtobufCMessageDescriptor proto_types__city__descriptor;
extern const ProtobufCMessageDescriptor proto_types__location__descriptor;
extern const ProtobufCMessageDescriptor proto_types__location_id__descriptor;
extern const ProtobufCMessageDescriptor proto_types__array_location_id__descriptor;
extern const ProtobufCMessageDescriptor proto_types__session_status__descriptor;
extern const ProtobufCMessageDescriptor proto_types__check_update_info__descriptor;
extern const ProtobufCMessageDescriptor proto_types__my_ip_info__descriptor;
extern const ProtobufCMessageDescriptor proto_types__port_map_item__descriptor;
extern const ProtobufCMessageDescriptor proto_types__array_port_map__descriptor;
extern const ProtobufCMessageDescriptor proto_types__login_info__descriptor;
extern const ProtobufCMessageDescriptor proto_types__connect_state__descriptor;
extern const ProtobufCMessageDescriptor proto_types__array_api_notification__descriptor;
extern const ProtobufCMessageDescriptor proto_types__array_locations__descriptor;
extern const ProtobufCMessageDescriptor proto_types__connection_settings__descriptor;
extern const ProtobufCMessageDescriptor proto_types__api_resolution__descriptor;
extern const ProtobufCMessageDescriptor proto_types__proxy_settings__descriptor;
extern const ProtobufCMessageDescriptor proto_types__firewall_settings__descriptor;
extern const ProtobufCMessageDescriptor proto_types__share_secure_hotspot__descriptor;
extern const ProtobufCMessageDescriptor proto_types__share_proxy_gateway__descriptor;
extern const ProtobufCMessageDescriptor proto_types__packet_size__descriptor;
extern const ProtobufCMessageDescriptor proto_types__mac_addr_spoofing__descriptor;
extern const ProtobufCMessageDescriptor proto_types__dns_while_connected_info__descriptor;
extern const ProtobufCMessageDescriptor proto_types__engine_settings__descriptor;
extern const ProtobufCMessageDescriptor proto_types__proxy_sharing_info__descriptor;
extern const ProtobufCMessageDescriptor proto_types__wifi_sharing_info__descriptor;
extern const ProtobufCMessageDescriptor proto_types__engine_persistent_state__descriptor;
extern const ProtobufCMessageDescriptor proto_types__network_interface__descriptor;
extern const ProtobufCMessageDescriptor proto_types__network_interfaces__descriptor;
extern const ProtobufCMessageDescriptor proto_types__network_white_list__descriptor;
extern const ProtobufCMessageDescriptor proto_types__background_settings__descriptor;
extern const ProtobufCMessageDescriptor proto_types__gui_settings__descriptor;
extern const ProtobufCMessageDescriptor proto_types__gui_persistent_state__descriptor;
extern const ProtobufCMessageDescriptor proto_types__split_tunneling_app__descriptor;
extern const ProtobufCMessageDescriptor proto_types__split_tunneling_network_route__descriptor;
extern const ProtobufCMessageDescriptor proto_types__split_tunneling_settings__descriptor;
extern const ProtobufCMessageDescriptor proto_types__split_tunneling__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_types_2eproto__INCLUDED */
