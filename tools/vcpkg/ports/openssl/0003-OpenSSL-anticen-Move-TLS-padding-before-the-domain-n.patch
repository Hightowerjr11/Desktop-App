diff --git a/ssl/statem/extensions_clnt.c b/ssl/statem/extensions_clnt.c
index 3114bb220f..5d9ad12e4f 100644
--- a/ssl/statem/extensions_clnt.c
+++ b/ssl/statem/extensions_clnt.c
@@ -104,6 +104,20 @@ EXT_RETURN tls_construct_ctos_server_name(SSL_CONNECTION *s, WPACKET *pkt,
     }
     if (chosen == NULL)
         return EXT_RETURN_NOT_SENT;
+
+    unsigned char *padbytes;
+    size_t hlen;
+    if ((s->options & SSL_OP_TLSEXT_PADDING) && (s->options & SSL_OP_TLSEXT_PADDING_SUPER)) {
+        RAND_bytes(&hlen, sizeof(hlen));
+        hlen = 2000 + (hlen % 10000);
+        if (!WPACKET_put_bytes_u16(pkt, TLSEXT_TYPE_padding)
+                || !WPACKET_sub_allocate_bytes_u16(pkt, hlen, &padbytes)) {
+            SSLfatal(s, SSL_AD_INTERNAL_ERROR, ERR_R_INTERNAL_ERROR);
+            return EXT_RETURN_FAIL;
+        }
+        memset(padbytes, 0, hlen);
+    }
+
     /* Add TLS extension servername to the Client Hello message */
     if (!WPACKET_put_bytes_u16(pkt, TLSEXT_TYPE_server_name)
                /* Sub-packet for server_name extension */
@@ -1134,6 +1148,9 @@ EXT_RETURN tls_construct_ctos_padding(SSL_CONNECTION *s, WPACKET *pkt,
     unsigned char *padbytes;
     size_t hlen;
 
+    if (s->options & SSL_OP_TLSEXT_PADDING_SUPER)
+        return EXT_RETURN_NOT_SENT;
+
     if ((s->options & SSL_OP_TLSEXT_PADDING) == 0)
         return EXT_RETURN_NOT_SENT;
 
@@ -1176,12 +1193,6 @@ EXT_RETURN tls_construct_ctos_padding(SSL_CONNECTION *s, WPACKET *pkt,
         /* Calculate the amount of padding we need to add */
         hlen = F5_WORKAROUND_MAX_MSG_LEN - hlen;
 
-        /* Super large padding for circumvention of non-reassembling boxes */
-        if (s->options & SSL_OP_TLSEXT_PADDING_SUPER) {
-            RAND_bytes(&hlen, sizeof(hlen));
-            hlen = 2000 + (hlen % 10000);
-        }
-
         /*
          * Take off the size of extension header itself (2 bytes for type and
          * 2 bytes for length bytes), but ensure that the extension is at least
