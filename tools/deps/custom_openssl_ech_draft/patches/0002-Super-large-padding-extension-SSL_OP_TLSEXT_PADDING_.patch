From cc876a7d66cbf96fbb9f5d64fc631951f695b953 Mon Sep 17 00:00:00 2001
Date: Thu, 8 Jun 2023 02:57:43 +0300
Subject: [PATCH 2/2] Super large padding extension SSL_OP_TLSEXT_PADDING_SUPER
 option

---
 include/openssl/ssl.h.in     | 2 ++
 ssl/statem/extensions_clnt.c | 5 +++++
 2 files changed, 7 insertions(+)

diff --git a/include/openssl/ssl.h.in b/include/openssl/ssl.h.in
index fce4dec..9ae1f4a 100644
--- a/include/openssl/ssl.h.in
+++ b/include/openssl/ssl.h.in
@@ -423,6 +423,8 @@ typedef int (*SSL_async_callback_fn)(SSL *s, void *arg);
  * that with a random value */
 #define SSL_OP_ECH_IGNORE_CID                           SSL_OP_BIT(34)
 #endif
+/* Super large padding to bypass non-reassembling censorship filters */
+#define SSL_OP_TLSEXT_PADDING_SUPER                     SSL_OP_BIT(35)
 
 /*
  * Option "collections."
diff --git a/ssl/statem/extensions_clnt.c b/ssl/statem/extensions_clnt.c
index c9397d7..e39d510 100644
--- a/ssl/statem/extensions_clnt.c
+++ b/ssl/statem/extensions_clnt.c
@@ -1221,6 +1221,11 @@ EXT_RETURN tls_construct_ctos_padding(SSL *s, WPACKET *pkt,
     if (hlen > F5_WORKAROUND_MIN_MSG_LEN && hlen < F5_WORKAROUND_MAX_MSG_LEN) {
         /* Calculate the amount of padding we need to add */
         hlen = F5_WORKAROUND_MAX_MSG_LEN - hlen;
+        /* Super large padding for circumvention of non-reassembling boxes */
+        if (s->options & SSL_OP_TLSEXT_PADDING_SUPER) {
+            RAND_bytes(&hlen, sizeof(hlen));
+            hlen = 2000 + (hlen % 10000);
+        }
 
         /*
          * Take off the size of extension header itself (2 bytes for type and
-- 
2.40.1.windows.1

