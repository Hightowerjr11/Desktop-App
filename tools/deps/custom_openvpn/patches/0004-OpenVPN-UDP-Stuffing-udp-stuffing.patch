From f239425150fb0fea662054459ec90b884bc99751 Mon Sep 17 00:00:00 2001
Date: Wed, 7 Jun 2023 23:30:37 +0300
Subject: [PATCH 4/4] OpenVPN UDP Stuffing (--udp-stuffing)

Send a single UDP packet of random size with random payload before
the RESET packet, to feed the censorship filters with unidentifiable
data.

Client-only option.
Should be enabled with "udp-stuffing" in the configuration file
or --udp-stuffing command line option.
---
 src/openvpn/options.c |  5 +++++
 src/openvpn/socket.h  | 41 +++++++++++++++++++++++++++++++++++++++++
 2 files changed, 46 insertions(+)

diff --git a/src/openvpn/options.c b/src/openvpn/options.c
index 9bea414..cd4656d 100644
--- a/src/openvpn/options.c
+++ b/src/openvpn/options.c
@@ -7814,6 +7814,11 @@ add_option(struct options *options,
         VERIFY_PERMISSION(OPT_P_GENERAL);
         options->sockflags |= SF_TCP_SPLITRESET;
     }
+    else if (streq(p[0], "udp-stuffing") && !p[1])
+    {
+        VERIFY_PERMISSION(OPT_P_GENERAL);
+        options->sockflags |= SF_UDP_STUFFING;
+    }
     else if (streq(p[0], "stale-routes-check") && p[1] && !p[3])
     {
         int ageing_time, check_interval;
diff --git a/src/openvpn/socket.h b/src/openvpn/socket.h
index afd1867..3cb54b2 100644
--- a/src/openvpn/socket.h
+++ b/src/openvpn/socket.h
@@ -208,6 +208,7 @@ struct link_socket
 #define SF_HOST_RANDOMIZE (1<<3)
 #define SF_GETADDRINFO_DGRAM (1<<4)
 #define SF_TCP_SPLITRESET (1<<5)
+#define SF_UDP_STUFFING (1<<6)
     unsigned int sockflags;
     int mark;
     const char *bind_dev;
@@ -1167,6 +1168,46 @@ link_socket_write_udp(struct link_socket *sock,
                       struct buffer *buf,
                       struct link_socket_actual *to)
 {
+#ifndef P_CONTROL_HARD_RESET_CLIENT_V2
+#define P_CONTROL_HARD_RESET_CLIENT_V2 7
+#endif
+#ifndef P_CONTROL_HARD_RESET_CLIENT_V3
+#define P_CONTROL_HARD_RESET_CLIENT_V3 10
+#endif
+#ifndef P_OPCODE_SHIFT
+#define P_OPCODE_SHIFT 3
+#endif
+    int rand_bytes(uint8_t *output, int len);
+
+#define STUFFING_LEN_MAX 1200
+
+    uint8_t opcode = *BPTR(buf) >> P_OPCODE_SHIFT;
+    if (
+        sock->sockflags & SF_UDP_STUFFING
+        && (opcode == P_CONTROL_HARD_RESET_CLIENT_V2
+            || opcode == P_CONTROL_HARD_RESET_CLIENT_V3)
+       )
+    {
+        uint16_t stuffing_len;
+        rand_bytes((uint8_t*)&stuffing_len, sizeof(stuffing_len));
+        stuffing_len = (stuffing_len % (STUFFING_LEN_MAX - 10)) + 10;
+
+        uint8_t stuffing_data[STUFFING_LEN_MAX] = {0};
+        rand_bytes(stuffing_data, sizeof(stuffing_data));
+        struct buffer stuffing_buf = alloc_buf(STUFFING_LEN_MAX);
+        buf_write(&stuffing_buf, stuffing_data, stuffing_len);
+
+#ifdef _WIN32
+        link_socket_write_win32(sock, &stuffing_buf, to);
+#else
+        link_socket_write_udp_posix(sock, &stuffing_buf, to);
+#endif
+
+        free_buf(&stuffing_buf);
+    }
+
+
 #ifdef _WIN32
     return link_socket_write_win32(sock, buf, to);
 #else
-- 
2.40.1

