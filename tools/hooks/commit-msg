#!/bin/bash
#*******************************************************************************
# Windscribe Build System
# Copyright (c) 2020-2021, Windscribe Limited. All rights reserved.
#*******************************************************************************
# HOOK:    commit-msg
# PURPOSE: checks for an empty commit message, and for ticket id matching.
# AUTHOR:  Alexander Popov (alexander.popov@windscribe.com)
#*******************************************************************************

EMSG="\e[1;31mERROR:\e[0;39m"

if [ -z "$1" ]; then
  printf "$EMSG This hook shall accept at least one argument.\n"
  exit 1
fi

commit_message_line=""
any_message_line=""
while IFS=$'\n' read line
do
  # Ignore comments
  if [[ ${line:0:1} == "#" ]] ; then
    continue
  fi
  if [[ "$line" == *"client/desktop/client-desktop"* ]]; then
    commit_message_line=$line
    break
  fi
  if [ -n "$line" ]; then
    any_message_line=$line
  fi
done < "$1"

empty_commit_message=0
extracted_ticket_id=""
branch_ticket_id=""
ticket_id_mismatch=0
if [ -z "$commit_message_line" ]; then
  if [ -z "$any_message_line" ]; then
    empty_commit_message=1
  fi
  if [[ "$any_message_line" == "(Enter commit message here)"* ]]; then
    empty_commit_message=1
  fi
else
  extracted_message=$commit_message_line
  extracted_message="$(echo "$extracted_message" | sed 's/https:\/\/gitlab.int.windscribe.com\/ws\/client\/desktop\/client-desktop\/-\/issues\/[0-9][0-9]*//')"
  extracted_message="$(echo "$extracted_message" | sed 's/ws\/client\/desktop\/client-desktop#[0-9][0-9]*//')"
  extracted_message_trimmed="$(echo "$extracted_message" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')"
  if [ -z "$extracted_message_trimmed" ]; then
    empty_commit_message=1
  fi
  if [[ "$extracted_message_trimmed" == "(Enter commit message here)"* ]]; then
    empty_commit_message=1
  fi
fi
extracted_ticket_id=$commit_message_line
extracted_ticket_id="$(echo $extracted_ticket_id | sed 's/.*https:\/\/gitlab.int.windscribe.com\/ws\/client\/desktop\/client-desktop\/-\/issues\/\([0-9][0-9]*\)/\1/')"
extracted_ticket_id="$(echo $extracted_ticket_id | sed 's/.*ws\/client\/desktop\/client-desktop#\([0-9][0-9]*\)/\1/')"
[ -n "$extracted_ticket_id" ] && [ "$extracted_ticket_id" -eq "$extracted_ticket_id" ] 2>/dev/null
if [ $? -ne 0 ]; then
  extracted_ticket_id=0
fi
branch_ticket_id=$(git branch | grep '*' | sed 's/\* \([0-9][0-9]*\)-.*/\1/')
[ -n "$branch_ticket_id" ] && [ "$branch_ticket_id" -eq "$branch_ticket_id" ] 2>/dev/null
if [ $? -ne 0 ]; then
  branch_ticket_id=0
fi
if [ $branch_ticket_id -ne $extracted_ticket_id ]; then
  ticket_id_mismatch=1
fi

if [ $empty_commit_message -eq 1 ]; then
  # Empty commit message results in an error.
  printf "$EMSG Empty commit messages are not allowed.\n"
  if [ -n "$commit_message_line" ]; then
    printf "Ticket ID: $extracted_ticket_id\n"
  else
    printf "No associated ticket.\n"
  fi
  printf "Commit declined due to the error(s).\n\n"
  exit 1
fi

if [ $ticket_id_mismatch -eq 1 ]; then
  # Ticket id mismatch results in an error.
  printf "$EMSG Ticket ID mismatch.\n"
  printf "Ticket ID from commit: $extracted_ticket_id\n"
  printf "Ticket ID from branch: $branch_ticket_id\n"
  printf "Commit declined due to the error(s).\n\n"
  exit 1
fi

exit 0
